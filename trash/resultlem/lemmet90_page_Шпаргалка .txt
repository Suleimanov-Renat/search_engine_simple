шпаргалка java программист 1 jpa и hibernate в вопрос и ответ знаете ли вы jpa а hibernate а если проверить в чем смысл серия стать 'шпаргалка java программиста'з время работа java программист я заметить что как правило программист постоянно и планомерно использовать от сила 10-20% от возможность тот или иной технология при это остальной возможность быстро забываться и при появление новый требование переход на новый работа или подготовка к технический интервью приходиться перечитывать весь документация и спецификация с нуль зато наличие краткий конспект особенность тот или иной технология шпаргалка позволять быстро освежить в память особенность тот или иной технология общий оглавление 'шпаргалок'1 jpa и hibernate в вопрос и ответ 2 триста пятьдесят самый популярный не мобильный java opensource проект на github 3 коллекция в java стандартный guava apache trove gs-collections и другой 4 java stream api 5 двести пятьдесят русскоязычный обучать видео доклад и лекция о java 6 список полезный ссылка для java программист 7 типовой задача 71 оптимальный путь преобразование inputstream в строка 72 самый производительный способ обход map' подсчёт количество вхождение подстрока 8 библиотека для работа с json gson fastjson logansquare jackson jsonpath и другой дать статья быть полезный и для тот кто только собираться изучать jpa и hibernate в это случай рекомендовать сразу открывать ответ и для тот кто уже хорошо знать jpa и hibernate в это случай статья позволить проверить свой знание и освежить особенность технология особенно статья быть полезный тем кто собираться пройти технический интервью где возможно быть задавать вопрос по jpa и hibernate или сам собираться провести технический интервью рекомендовать так считать правильный ответ если вы ответить на вопрос по ваш мнение правильно и полностью — поставить себя 1 балл если ответить только частично — 05 балл везде где только возможно я стараться добавлять цитата из оригинальный документация но из-за ограничение лицензия oracle не мочь давать слишком большой цитата из документация общий вопрос вопрос 1 что такой jpa ответjpa java persistence api это спецификация java ee и java se описывать система управление сохранение java объект в таблица реляционный база дать в удобный вид сам java не содержимый реализация jpa однако есть существовать много реализация дать спецификация от разный компания открытый и нет это не единственный способ сохранение java объект в база дать orm система но один из самый популярный в java мир оригиналthe jpa java persistence api is the specification of the java api for the management of persistence and object/relational mapping with java ee and java se the technical objective of this work is to provide an object/relational mapping facility for the java application developer using a java domain model to manage a relational database вопрос 2 в чем её отличие jpa от hibernate ответhibernate один из самый популярный открытый реализация последний версия спецификация jpa 21 даже скорее самый популярный почти стандарт де-факто то есть jpa только описывать правило и api а hibernate реализовать этот описание впрочем у hibernate как и у многий другой реализация jpa есть дополнительный возможность не описать в jpa и не переносить на другой реализация jpa вопрос 3 можно ли использовать jpa c nosql база ответвообще спецификация jpa говорить только о отображение java объект в таблица реляционный база дать но при это существовать ряд реализация данный стандарт для nosql база дать kundera datanucleus objectdb и ряд другой естественно при это не весь специфичный для реляционный база дать особенность спецификация переноситься при это на nosql база полностью вопрос 4 в чем её отличие jpa от jdo ответjpa java persistence api и java data objects jdo два спецификация сохранение java объект в база дать если jpa сконцентрировать только на реляционный база то jdo более общий спецификация который описывать orm для любой возможный база и хранилище в принцип можно рассматривать jpa как специализировать на релятивистский база часть спецификация jdo даже при тот что api этот два спецификация не полностью совпадать также отличаться «разработчик спецификация — если jpa разрабатываться как jsr то jdo сначала разрабатываться как jsr теперь разрабатываться как проект apache jdo дробный про сравнение функционал и api спецификация можно посмотреть здесь вопрос 5 что такой entity ответentity это легковесный хранить объект бизнес логика persistent domain object основный программный сущность это entity класс который так же мочь использовать дополнительный класс который мочь использоваться как вспомогательный класс или для сохранение состояние еntity java persistence 21 chapter 2 оригиналan entity is a lightweight persistent domain object the primary programming artifact is the entity class an entity class may make use of auxiliary classes that serve as helper classes or that are used to represent the state of the entity вопрос 6 мочь ли entity класс наследоваться от не entity класс non-entity classes ответмочь java persistence 21 chapter 21 оригиналentities may extend non-entity classes… вопрос 7 мочь ли entity класс наследоваться от другой entity класс ответтоже мочь java persistence 21 chapter 21 оригиналentities may extend non-entity classes as well as entity classes… вопрос 8 мочь ли не entity класс наследоваться от entity класс ответить это тоже допустимый java persistence 21 chapter 21 оригиналentities may extend non-entity classes as well as entity classes and non-entity classes may extend entity classes вопрос 9 мочь ли entity быть абстрактный класс ответмочь при это он сохранять весь свойство entity за исключение тот что он нельзя непосредственно инициализировать java persistence 21 chapter 2111 оригиналan abstract class can be specified as an entity an abstract entity differs from a concrete entity only in that it cannot be directly instantiated an abstract entity is mapped as an entity and can be the target of queries which will operate over and/or retrieve instances of its concrete subclasses вопрос 10 какой требование jpa к entity класс вы мочь перечислить не менее шесть требование ответ1 entity класс должный быть отметить аннотация entity или описать в xml файл конфигурация jpa 2 entity класс должный содержимый public или protected конструктор без аргумент он также мочь иметь конструктор с аргумент 3 entity класс должный быть класс верхний уровень top-level class 4 entity класс не мочь быть enum или интерфейс 5 entity класс не мочь быть финальный класс final class 6 entity класс не мочь содержимый финальный поль или метод если они участвовать в маппинга persistent final methods or persistent final instance variables 7 если объект entity класс быть передаваться по значение как отдельный объект detached object например через удалённый интерфейс through a remote interface он так же должный реализовывать serializable интерфейс 8 поль entity класс должный быть напрямую доступный только метод самый entity класс и не должный быть напрямую доступный другой класс использовать этот entity такой класс должный обращаться только к метод getter/setter метод или другой метод бизнес-логика в entity класс 9 enity класс должный содержимый первичный ключ то есть атрибут или группа атрибут который уникально определять запись это enity класс в база дать java persistence 21 chapter 21 and 24 оригинал1 the entity class must be annotated with the entity annotation or denoted in the xml descriptor as an entity 2 the entity class must have a no-arg constructor the entity class may have other constructors as well 3 the no-arg constructor must be public or protected 4 the entity class must be a top-level class an enum or interface must not be designated as an entity 5 the entity class must not be final no methods or persistent instance variables of the entity class may be final 6 if an entity instance is to be passed by value as a detached object eg through a remote interface the entity class must implement the serializable interface 7 entities support inheritance polymorphic associations and polymorphic queries 8 both abstract and concrete classes can be entities entities may extend non-entity classes as well as entity classes and non-entity classes may extend entity classes 10 the persistent state of an entity is represented by instance variables which may correspond to javabeans properties an instance variable must be directly accessed only from within the methods of the entity by the entity instance itself instance variables must not be accessed by clients of the entity the state of the entity is available to clients only through the entity’s methods—ie accessor methods getter/setter methods or other business methods … 24 primary keys and entity identity every entity must have a primary key вопрос 11 какой два тип элемент есть у entity класс или другой слово перечислить два тип доступ access к элемент entity класс ответjpa указывать что она мочь работать как с свойство класс property оформить в стиль javabeans либо с поле field то есть переменный класс instance variables соответственно при это тип доступ быть либо property access или field access java persistence 21 chapter 22 оригиналthe persistent state of an entity is accessed by the persistence provider runtime[1] either via javabeans style property accessors property access” or via instance variables field access” whether persistent properties or persistent fields or a combination of the two is used for the provider’s access to a given class or entity hierarchy is determined as described in section 23 access type” вопрос 12 что такой атрибут entity класс в терминология jpa ответjpa указывать что она мочь работать как с свойство класс property оформить в стиль javabeans либо с поле field то есть переменный класс instance variables оба тип элемент entity класс называться атрибут entity класс java persistence 21 chapter 22 оригиналthe persistent state of an entity is accessed by the persistence provider runtime[1] either via javabeans style property accessors property access” or via instance variables field access” whether persistent properties or persistent fields or a combination of the two is used for the provider’s access to a given class or entity hierarchy is determined as described in section 23 access type” terminology note the persistent fields and properties of an entity class are generically referred to in this document as the attributes” of the class вопрос 13 какой тип дать допустимый в атрибут entity класс поле или свойство ответдопустимый тип атрибут у entity класс 1 примитивный тип и они обёртка java 2 строка 3 любой сериализовать тип java реализовать serializable интерфейс 4 enums 5 entity types 6 embeddable класс 7 и коллекция тип 1-6 java persistence 21 chapter 22 оригиналthe persistent fields or properties of an entity may be of the following types java primitive types javalangstring other java serializable types including wrappers of the primitive types javamathbiginteger javamathbigdecimal javautildate javautilcalendar[5] javasqldate javasqltime javasqltimestamp byte[] byte[] char[] character[] and user-defined types that implement the serializable interface enums entity types collections of entity types embeddable classes see section 25 collections of basic and embeddable types see section 26 вопрос 14 какой тип дать можно использовать в атрибут входящая в первичный ключ entity класс составной или простой чтобы получить первичный ключ мочь использоваться для люба база дать а в случай автогенерировать первичный ключ generated primary keys ответдопустимый тип атрибут входящая в первичный ключ 1 примитивный тип и они обёртка java 2 строка 3 bigdecimal и biginteger 4 javautildate и javasqldate в случай автогенерировать первичный ключ generated primary keys допустимый 1 только числовой тип в случай использование другой тип дать в первичный ключ он мочь работать только для некоторый база дать тот становиться не переносить not portable java persistence 21 chapter 24 оригиналa simple primary key or a field or property of a composite primary key should be one of the following types any java primitive type any primitive wrapper type javalangstring javautildate javasqldate javamathbigdecimal javamathbiginteger… entities whose primary keys use types other than these will not be portable if generated primary keys are used only integral types will be portable сложный структура jpa вопрос 15 что такой встраивать embeddable класс ответвстраивать embeddable класс это класс который не использоваться сам по себя только как часть один или несколько entity класс entity класс мочь содержимый как одиночный встраивать класс так и коллекция такой класс также такой класс мочь быть использовать как ключ или значение map в время выполнение каждый встраивать класс принадлежать только один объект entity класс и не мочь быть использовать для передача дать между объект entity класс то есть такой класс не являться общий структура дать для разный объект в целое такой класс служить для тот чтобы выносить определение общий атрибут для несколько entity можно считать что jpa просто встраивать в entity вместо объект такой класс тот атрибут который он содержимый java persistence 21 chapter 25 оригиналan entity may use other fine-grained classes to represent entity state instances of these classes unlike entity instances do not have persistent identity of their own instead they exist only as part of the state of the entity to which they belong an entity may have collections of embeddables as well as single-valued embeddable attributes embeddables may also be used as map keys and map values embedded objects belong strictly to their owning entity and are not sharable across persistent entities attempting to share an embedded object across entities has undefined semantics вопрос 16 мочь ли встраивать embeddable класс содержимый другой встраивать embeddable класс ответд мочь java persistence 21 chapter 25 оригиналan embeddable class may be used to represent the state of another embeddable classan embeddable class including an embeddable class within another embeddable class may contain a collection of a basic type or other embeddable class вопрос 17 мочь ли встраивать embeddable класс содержимый связь relationship с другой entity или коллекция entity если мочь то существовать ли какой-то ограничение на такой связь relationship ответмочь но только в случай если такой класс не использоваться как первичный ключ или ключ map' java persistence 21 chapter 25 оригиналan embeddable class may contain a relationship to an entity or collection of entities since instances of embeddable classes themselves have no persistent identity the relationship from the referenced entity is to the entity that contains the embeddable instances and not to the embeddable itself an embeddable class that is used as an embedded id or as a map key must not contain such a relationship вопрос 18 какой требование jpa устанавливать к встраивать embeddable класс ответ1 такой класс должный удовлетворять тем же правило что entity класс за исключение тот что они не обязать содержимый первичный ключ и быть отметить аннотация entity сантиметр вопрос 10 2 embeddable класс должный быть отметить аннотация embeddable или описать в xml файл конфигурация jpa java persistence 21 chapter 25 оригиналembeddable classes must adhere to the requirements specified in section 21 for entities with the exception that embeddable classes are not annotated as entity embeddable classes must be annotated as embeddable or denoted in the xml descriptor as such вопрос 19 какой тип связь relationship между entity вы знаете перечислить восемь тип либо указать четыре тип связь каждый из который можно разделить ещё на два вид ответсуществовать следующий четыре тип связь 1 onetoone связь один к один то есть один объект entity мочь связать не большой чем с один объект другой entity  2 onetomany связь один к многий один объект entity мочь быть связать с целый коллекция другой entity 3 manytoone связь многие к один обратный связь для onetomany 4 manytomany связь многие к многий каждый из который можно разделить ещё на два вид 1 bidirectional 2 unidirectional bidirectional — ссылка на связь устанавливаться у весь entity то есть в случай onetoone a-b в entity a есть ссылка на entity b в entity b есть ссылка на entity a entity a считаться владелец этот связь это важный для случай каскадный удаление дать тогда при удаление a также быть удалить b но не наоборот undirectional- ссылка на связь устанавливаться только с один сторона то есть в случай onetoone a-b только у entity a быть ссылка на entity b у entity b ссылка на a не быть java persistence 21 chapter 29 оригиналrelationships among entities may be one-to-one one-to-many many-to-one or many-to-many relationships are polymorphic if there is an association between two entities one of the following relationship modeling annotations must be applied to the corresponding persistent property or field of the referencing entity onetoone onetomany manytoone manytomany for associations that do not specify the target type eg where java generic types are not used for collections it is necessary to specify the entity that is the target of the relationship[19] equivalent xml elements may be used as an alternative to these mapping annotations these annotations mirror common practice in relational database schema modeling the use of the relationship modeling annotations allows the object/relationship mapping of associations to the relational database schema to be fully defaulted to provide an ease-of-development facility this is described in section 210 relationship mapping defaults” relationships may be bidirectional or unidirectional a bidirectional relationship has both an owning side and an inverse non-owning side a unidirectional relationship has only an owning side the owning side of a relationship determines the updates to the relationship in the database as described in section 324 вопрос 20 что такой mapped superclass ответmapped superclass это класс от который наследоваться entity он мочь содержимый анотация jpa однако сам такой класс не являться entity он не обязательно выполнять весь требование установленный для entity например он мочь не содержимый первичный ключ такой класс не мочь использоваться в операция entitymanager или query такой класс должный быть отметить аннотация mappedsuperclass или соответственно описать в xml файл java persistence 21 chapter 22 примерыпример на github 1 2 3 example concrete class as a mapped superclass @mappedsuperclass public class employee { @id protected integer empid @version protected integer version @manytoone @joincolumnname="addr" protected address address public integer getempid {  } public void setempidinteger id {  } public address getaddress {  } public void setaddressaddress addr {  } } // default table is ftemployee table @entity public class ftemployee extends employee { // inherited empid field mapped to ftemployeeempid // inherited version field mapped to ftemployeeversion // inherited address field mapped to ftemployeeaddr fk // defaults to ftemployeesalary protected integer salary public ftemployee {} public integer getsalary {  } public void setsalaryinteger salary {  } } @entity @tablename="ptemp" @associationoverridename="address" joincolumns=@joincolumnname="addrid" public class parttimeemployee extends employee { // inherited empid field mapped to ptempempid // inherited version field mapped to ptempversion // address field mapping overridden to ptempaddrid fk @columnname="wage" protected float hourlywage public parttimeemployee {} public float gethourlywage {  } public void sethourlywagefloat wage {  } } оригиналan entity may inherit from a superclass that provides persistent entity state and mapping information but which is not itself an entity typically the purpose of such a mapped superclass is to define state and mapping information that is common to multiple entity classes a mapped superclass unlike an entity is not queryable and must not be passed as an argument to entitymanager or query operations persistent relationships defined by a mapped superclass must be unidirectional both abstract and concrete classes may be specified as mapped superclasses the mappedsuperclass annotation or mapped-superclass xml descriptor element is used to designate a mapped superclass a class designated as a mapped superclass has no separate table defined for it its mapping information is applied to the entities that inherit from it a class designated as a mapped superclass can be mapped in the same way as an entity except that the mappings will apply only to its subclasses since no table exists for the mapped superclass itself when applied to the subclasses the inherited mappings will apply in the context of the subclass tables mapping information can be overridden in such subclasses by using the attributeoverride and associationoverride annotations or corresponding xml elements all other entity mapping defaults apply equally to a class designated as a mapped superclass the following example illustrates the definition of a concrete class as a mapped superclass вопрос 21 какой три тип стратегия наследование мапинга inheritance mapping strategies описать в jpa ответво jpa описать три стратегия наследование мапинга inheritance mapping strategies то есть как jpa быть работать с класс-наследник entity 1 один таблица на весь иерархия наследование a single table per class hierarchy — весь enity с весь наследник записываться в один таблица для идентификация тип entity определяться специальный колонка discriminator column” например если есть entity animals c класс-потомок cats и dogs при такой стратегия весь entity записываться в таблица animals но при это иметь дополнительный колонка animaltype в который соответственно писаться значение «cat или «dog минус являться то что в общий таблица быть создать весь поль уникальный для каждый из класс-потомок который быть пустой для весь другой класс-потомок например в таблица animals оказаться и скорость лазание по дерево от cats и мочь ли пёс приносить тапка от dogs который быть всегда иметь null для dog и cat соотвественный 2 объединять стратегия joined subclass strategy — в этот стратегия каждый класс enity сохранять дать в свой таблица но только уникальный колонка не унаследовать от класс-предок и первичный ключ а весь унаследовать колонка записываться в таблица класс-предок дополнительно устанавливаться связь relationships между этот таблица например в случай класс animals смвыше быть три таблица animals cats dogs причём в cats быть записать только ключ и скорость лазание в dogs — ключ и уметь ли пёс приносить палка а в animals весь остальной дать cats и dogs c ссылка на соответствующий таблица минус тут являться потеря производительность от объединение таблица join для любой операция 3 один таблица для каждый класс table per concrete class strategy — тут весь просто каждый отдельный класс-наследник иметь свой таблица тот для cats и dogs смвыше весь дать быть записываться просто в таблица cats и dogs как если бы они вообще не иметь общий суперкласс минус являться плохой поддержка полиморфизм polymorphic relationships и то что для выборка весь класс иерархия потребоваться большой количество отдельный sql запрос или использование union запрос для задание стратегия наследование использоваться аннотация inheritance или соответствующий блок java persistence 21 chapter 212 j7ee javadoc примерыпример на github tableperclass 1 2 3 joined1 2 3 singletable 1 2 3 @entity @inheritancestrategy=joined public class customer {  } @entity public class valuedcustomer extends customer {  } оригиналthere are three basic strategies that are used when mapping a class or class hierarchy to a relational database  a single table per class hierarchy  a joined subclass strategy in which fields that are specific to a subclass are mapped to a separate table than the fields that are common to the parent class and a join is performed to instantiate the subclass  a table per concrete entity class вопрос 22 какой два тип fetch стратегия в jpa вы знаете ответво jpa описать два тип fetch стратегия 1 lazy — дать поль быть загруженна только в время первое доступ к это поль 2 eager — дать поль быть загруженна немедленно java persistence 21 chapter 1116 j7ee javadoc оригиналthe eager strategy is a requirement on the persistence provider runtime that the associated entity must be eagerly fetched the lazy strategy is a hint to the persistence provider runtime that the associated entity should be fetched lazily when it is first accessed the implementation is permitted to eagerly fetch associations for which the lazy strategy hint has been specified основной операция с entity вопрос 23 что такой entitymanager и какой основной он функция вы мочь перечислить ответentitymanager это интерфейс который описывать api для весь основный операция над enitity получение дать и другой сущность jpa по суть главный api для работа с jpa основной операция 1 для операция над entity persist добавление entity под управление jpa merge обновление remove удаление refresh обновление дать detach удаление из управление jpa lock блокирование enity от изменение в другой thread 2 получение дать find поиск и получение entity createquery createnamedquery createnativequery contains createnamedstoredprocedurequery createstoredprocedurequery 3 получение другой сущность jpa gettransaction getentitymanagerfactory getcriteriabuilder getmetamodel getdelegate 4 работа с entitygraph createentitygraph getentitygraph 4 общий операция над entitymanager или весь entities close isopen getproperties setproperty clear java persistence 21 chapter 311 j7ee javadoc примерыпример на github 1 операция persist 1 persist 2 persist 3 merge remove detach detach 2 2 поиск find 1 find 2 find 3 createquery 1 createquery 2 createnativequery 1 createnativequery 2 createstoredprocedurequery createnamedquery 3 работа entitygraph 1 2 3 4 оригиналinterface used to interact with the persistence context an entitymanager instance is associated with a persistence context a persistence context is a set of entity instances in which for any persistent entity identity there is a unique entity instance within the persistence context the entity instances and their lifecycle are managed the entitymanager api is used to create and remove persistent entity instances to find entities by their primary key and to query over entities the set of entities that can be managed by a given entitymanager instance is defined by a persistence unit a persistence unit defines the set of all classes that are related or grouped by the application and which must be colocated in their mapping to a single database вопрос 24 какой четыре статус жизненный цикл entity объект entity instance’s life cycle вы можито перечислить ответ entity объект существовать четыре статус жизненный цикл new managed detached или removed они описание 1 new — объект создать но при это ещё не иметь сгенерировать первичный ключ и пока ещё не сохранный в база дать 2 managed — объект создать управляться jpa иметь сгенерировать первичный ключ 3 detached — объект быть создать но не управляться или большой не управляться jpa 4 removed — объект создать управляться jpa но быть удалённый после commit'a транзакция java persistence 21 chapter 32 оригиналan entity instance can be characterized as being new managed detached or removed  a new entity instance has no persistent identity and is not yet associated with a persistence context  a managed entity instance is an instance with a persistent identity that is currently associated with a persistence context  a detached entity instance is an instance with a persistent identity that is not or no longer associated with a persistence context  a removed entity instance is an instance with a persistent identity associated with a persistence context that will be removed from the database upon transaction commit вопрос 25 как влиять операция persist на entity объект каждый из четыре статус ответ1 если статус entity new то он меняться на managed и объект быть сохранный в база при commit' транзакция или в результат flush операция 2 если статус уже managed операция игнорироваться однако зависимый entity мочь поменять статус на managed если у они есть аннотация каскадный изменение 3 если статус removed то он меняться на managed 4 если статус detached быть выкинуть exception сразу или на этап commit' транзакция java persistence 21 chapter 322 оригинал if x is a new entity it becomes managed the entity x will be entered into the database at or before transaction commit or as a result of the flush operation  if x is a preexisting managed entity it is ignored by the persist operation however the persist operation is cascaded to entities referenced by x if the relationships from x to these other entities are annotated with the cascade=persist or cascade=all annotation element value or specified with the equivalent xml descriptor element  if x is a removed entity it becomes managed  if x is a detached object the entityexistsexception may be thrown when the persist operation is invoked or the entityexistsexception or another persistenceexception may be thrown at flush or commit time  for all entities y referenced by a relationship from x if the relationship to y has been annotated with the cascade element value cascade=persist or cascade=all the persist operation is applied to y вопрос 26 как влиять операция remove на entity объект каждый из четыре статус ответ1 если статус entity new операция игнорироваться однако зависимый entity мочь поменять статус на removed если у они есть аннотация каскадный изменение и они иметь статус managed 2 если статус managed то статус меняться на removed и запись объект в база дать быть удалить при commit' транзакция так же произойти операция remove для весь каскадный зависимый объект 3 если статус removed то операция игнорироваться 4 если статус detached быть выкинуть exception сразу или на этап commit' транзакция java persistence 21 chapter 323 оригинал if x is a new entity it is ignored by the remove operation however the remove operation is cascaded to entities referenced by x if the relationship from x to these other entities is annotated with the cascade=remove or cascade=all annotation element value  if x is a managed entity the remove operation causes it to become removed the remove operation is cascaded to entities referenced by x if the relationships from x to these other entities is annotated with the cascade=remove or cascade=all annotation element value  if x is a detached entity an illegalargumentexception will be thrown by the remove operation or the transaction commit will fail  if x is a removed entity it is ignored by the remove operation  a removed entity x will be removed from the database at or before transaction commit or as a result of the flush operation вопрос 27 как влиять операция merge на entity объект каждый из четыре статус ответ1 если статус detached то либо дать быть скопировать в существующий managed entity с тем же первичный ключ либо создать новый managed в который скопироваться дать 1 если статус entity new то быть создать новый managed entity в который быть скопировать дать прошлое объект 2 если статус managed операция игнорироваться однако операция merge сработать на каскадный зависимый entity если они статус не managed 3 если статус removed быть выкинуть exception сразу или на этап commit' транзакция java persistence 21 chapter 3271 оригинал if x is a detached entity the state of x is copied onto a pre-existing managed entity instance x' of the same identity or a new managed copy x' of x is created  if x is a new entity instance a new managed entity instance x' is created and the state of x is copied into the new managed entity instance x'  if x is a removed entity instance an illegalargumentexception will be thrown by the merge operation or the transaction commit will fail  if x is a managed entity it is ignored by the merge operation however the merge operation is cascaded to entities referenced by relationships from x if these relationships have been annotated with the cascade element value cascade=merge or cascade=all annotation  for all entities y referenced by relationships from x having the cascade element value cascade=merge or cascade=all y is merged recursively as y' for all such y referenced by x x' is set to reference y' note that if x is managed then x is the same object as x'  if x is an entity merged to x' with a reference to another entity y where cascade=merge or cascade=all is not specified then navigation of the same association from x' yields a reference to a managed object y' with the same persistent identity as y вопрос 28 как влиять операция refresh на entity объект каждый из четыре статус ответ1 если статус entity managed то в результат операция быть востановить весь изменение из база дать данный entity так же произойти refresh весь каскадный зависимый объект 2 если статус new removed или detached быть выкинуть exception java persistence 21 chapter 325 оригинал if x is a managed entity the state of x is refreshed from the database overwriting changes made to the entity if any the refresh operation is cascaded to entities referenced by x if the relationship from x to these other entities is annotated with the cascade=refresh or cascade=all annotation element value  if x is a new detached or removed entity the illegalargumentexception is thrown вопрос 29 как влиять операция detach на entity объект каждый из четыре статус ответ1 если статус entity managed или removed то в результат операция статус entity и весь каскадно-зависимый объект стать detached 2 если статус new или detached то операция игнорироваться java persistence 21 chapter 326 оригинал if x is a managed entity the detach operation causes it to become detached the detach operation is cascaded to entities referenced by x if the relationships from x to these other entities is annotated with the cascade=detach or cascade=all annotation element value entities which previously referenced x will continue to reference x  if x is a new or detached entity it is ignored by the detach operation  if x is a removed entity the detach operation causes it to become detached the detach operation is cascaded to entities referenced by x if the relationships from x to these other entities is annotated with the cascade=detach or cascade=all annotation element value entities which previously referenced x will continue to reference x portable applications should not pass removed entities that have been detached from the persistence context to further entitymanager operations аннотация jpa вопрос 30 для что нужный аннотация basic ответbasic — указывать на простой тип маппинга дать на колонка таблица база дать также в параметр аннотация можно указать fetch стратегия доступ к поль и являться ли это пол обязательный или нет примерыпример на github 1 2 3 4 example 1 @basic protected string name example 2 @basicfetch=lazy protected string getname { return name } оригиналthe basic annotation is the simplest type of mapping to a database column the basic annotation can be applied to a persistent property or instance variable of any of the following types java primitive types wrappers of the primitive types javalangstring javamathbiginteger javamathbigdecimal javautildate javautilcalendar javasqldate javasqltime javasqltimestamp byte[] byte[] char[] character[] enums and any other type that implements serializable a вопрос 31 для что нужный аннотация access ответон определять тип доступ access type для класс entity суперкласс embeddable или отдельный атрибут то есть как jpa быть обращаться к атрибут entity как к поль класс field или как к свойство класс property иметь гетера getter и сетеры setter java persistence 21 chapter 1111 оригиналthe access annotation is used to specify an access type to be applied to an entity class mapped superclassor embeddable class or to a specific attribute of such a class вопрос 32 какой аннотация можно перекрыть связь override entity relationship или атрибут унаследовать от суперкласс или задать в embeddable класс при использование это embeddable класс в один из entity класс и не перекрывать в остальной ответдлить такой перекрывание существовать четыре аннотация 1 attributeoverride чтобы перекрыть поль свойство и первичный ключ 2 attributeoverrides аналогично можно перекрыть поль свойство и первичный ключ с множественный значение 3 associationoverride чтобы перекрывать связь override entity relationship 4 associationoverrides чтобы перекрывать множественный связь multiple relationship java persistence 21 chapter 1112-1115 оригиналthe associationoverride annotation is used to override a mapping for an entity relationship пример associationoverrideexample 1 @mappedsuperclass public class employee { @id protected integer id @version protected integer version @manytoone protected address address public integer getid {  } public void setidinteger id {  } public address getaddress {  } public void setaddressaddress address {  } } @entity @associationoverridename="address" joincolumns=@joincolumnname="addrid" public class parttimeemployee extends employee { // address field mapping overridden to addrid foreign key @columnname="wage" protected float hourlywage public float gethourlywage {  } public void sethourlywagefloat wage {  } } example 2 overriding of the mapping for the phonenumbers relationship defined in the contactinfo embeddable class @entity public class employee { @id int id @associationoverride name="phonenumbers" jointable=@jointable name="empphones" joincolumns=@joincolumnname="emp" inversejoincolumns=@joincolumnname="phone"   @embedded contactinfo contactinfo  } @embeddable public class contactinfo { @manytoone address address // unidirectional @manytomanytargetentity=phonenumberclass list phonenumbers } @entity public class phonenumber { @id int number @manytomanymappedby="contactinfophonenumbers" collection<employee> employees } вопрос 33 какой аннотация можно управлять кеширование jpa для данный entity ответcacheable — позволять включить или выключить использование кеш два уровень second-level cache для данный entity если провайдер jpa поддерживать работа с кеширование и настройка кеш second-level cache стоять как enableselective или disableselective сантиметр вопрос 41 обратить внимание свойство наследоваться и если не быть перекрыть у наследник то кеширование измениться и для они тоже примерыпример на github 1 2 3 4 оригиналthe cacheable annotation specifies whether an entity should be cached if caching is enabled when the value of the persistencexml shared-cache-mode element is enableselective or disableselective the value of the cacheable annotation is inherited by subclasses it can be overridden by specifying cacheable on a subclass @target{type} @retentionruntime public @interface cacheable { boolean value default true } cacheablefalse means that the entity and its state must not be cached by the provider if the shared-cache-mode element is not specified in the persistencexml file and the javaxpersistencesharedcachemode property is not specified when the entity manager factory for the persistence unit is created the semantics of the cacheable annotation are undefined вопрос 34 какой аннотация служить для задание класс преобразование basic аттрибут entity в другой тип при сохранении/получение дать они база например работать с аттрибут entity boolean тип но в база сохранять он как число ответconvert и converts — позволять указать класс для конвертация basic аттрибут entity в другой тип converts — позволять указать несколько класс конвертация класс для конвертация должный реализовать интерфейс attributeconverter и мочь быть отметить но это не обязательно аннотация converter дробный сантиметр javadoc 7ee примерыпример на github 1 2 3 example 1 convert a basic attribute @converter public class booleantointegerconverter implements attributeconverter<boolean integer> {  } @entity public class employee { @id long id @convertbooleantointegerconverterclass boolean fulltime  } example 2 auto-apply conversion of a basic attribute @converterautoapply=true public class employeedateconverter implements attributeconverter<comacmeemployeedate javasqldate> {  } @entity public class employee { @id long id  // employeedateconverter is applied automatically employeedate startdate } example 3 disable conversion in the presence of an autoapply converter @convertdisableconversion=true employeedate lastreview example 4 apply a converter to an element collection of basic type @elementcollection // applies to each element in the collection @convertnameconverterclass list<string> names example 5 apply a converter to an element collection that is a map or basic values the converter is applied to the map value @elementcollection @convertemployeenameconverterclass map<string string> responsibilities example 6 apply a converter to a map key of basic type @onetomany @convertconverter=responsibilitycodeconverterclass attributename="key" map<string employee> responsibilities example 7 apply a converter to an embeddable attribute @embedded @convertconverter=countryconverterclass attributename="country" address address example 8 apply a converter to a nested embeddable attribute @embedded @convertconverter=cityconverterclass attributename="regioncity" address address example 9 apply a converter to a nested attribute of an embeddable that is a map key of an element collection @entity public class propertyrecord {  @convertname="keyregioncity" converter=cityconverterclass @elementcollection map<address propertyinfo> parcels } example 10 apply a converter to an embeddable that is a map key for a relationship @onetomany @convertattributename="keyjobtype" converter=responsibilitytypeconverterclass map<responsibility employee> responsibilities example 11 override conversion mappings for attributes inherited from a mapped superclass @entity @converts{ @convertattributename="startdate" converter=dateconverterclass @convertattributename="enddate" converter=dateconverterclass} public class fulltimeemployee extends genericemployee {  } вопрос 35 какой аннотация можно задать класс метод который должный выполниться при определённый jpa операция над данные enitity или mapped superclass такой как удаление изменение дать и тп ответаннотация entitylisteners позволять задать класс listener который быть содержимый метод обработка событие сallback methods определённый entity или mapped superclass дробный сантиметр javadoc 7ee примерыпример на github 1 2 3 @entity @entitylistenerscomacmealertmonitorclass public class account { long accountid integer balance boolean preferred @id public long getaccountid {  }  public integer getbalance {  }  @transient // because status depends upon non-persistent context public boolean ispreferred {  }  public void depositinteger amount {  } public integer withdrawinteger amount throws nsfexception { } @prepersist protected void validatecreate { if getbalance < minrequiredbalance throw new accountexception"insufficient balance to open an account" } @postload protected void adjustpreferredstatus { preferred = getbalance >= accountmanagergetpreferredstatuslevel } } public class alertmonitor { @postpersist public void newaccountalertaccount acct { alertssendmarketinginfoacctgetaccountid acctgetbalance } } вопрос 36 для что нужный callback метод в jpa к какой сущность применяться аннотация callback метод перечислить семь callback метод или что тоже самый аннотация callback метод ответcallback метод служить для вызов при определённый событие entity то есть добавить обработка например удаление entity метод jpa мочь быть добавить к entity класс к mapped superclass или к callback listener класс задать аннотация entitylisteners сантиметр предыдущий вопрос существовать семь callback метод и аннотация с тот же имя 1 prepersist 2 postpersist 3 preremove 4 postremove 5 preupdate 6 postupdate 7 postload дробный сантиметр javadoc 7ee или спецификация jpa21 глава 352 примерыпример на github prepersist postpersist preremove postupdate postload @entity @entitylistenerscomacmealertmonitorclass public class account { long accountid integer balance boolean preferred @id public long getaccountid {  }  public integer getbalance {  }  @transient // because status depends upon non-persistent context public boolean ispreferred {  }  public void depositinteger amount {  } public integer withdrawinteger amount throws nsfexception { } @prepersist protected void validatecreate { if getbalance < minrequiredbalance throw new accountexception"insufficient balance to open an account" } @postload protected void adjustpreferredstatus { preferred = getbalance >= accountmanagergetpreferredstatuslevel } } public class alertmonitor { @postpersist public void newaccountalertaccount acct { alertssendmarketinginfoacctgetaccountid acctgetbalance } } вопрос 37 какой аннотация служать для установка порядок выдача элемент коллекция entity ответдлить это служить аннотация orderby и ordercolumn дробный сантиметр javadoc 7ee или спецификация jpa21 глава 11142 примерыexample 1 @entity public class course {  @manytomany @orderby"lastname asc" public list<student> getstudents {}  } example 2 @entity public class student {  @manytomanymappedby="students" @orderby // pk is assumed public list<course> getcourses {}  } example 3 @entity public class person {  @elementcollection @orderby"zipcodezip zipcodeplusfour" public set<address> getresidences {}  } вопрос 38 какой аннотацея можно исключить поль и свойство entity из маппинга property or field is not persistent ответдлить это служить аннотация transient дробный сантиметр javadoc 7ee или спецификация jpa21 глава 11152 пример@entity public class employee { @id int id @transient user currentuser  } сложный вопрос jpa вопрос 39 какой шесть вид блокировка lock описать в спецификация jpa или какой есть значение у enum lockmodetype в jpa ответ jpa есть шесть вид блокировка перечислимый они в порядок увеличение надёжность от самый ненадёжный и быстрый до самый надёжный и медленный 1 none — без блокировка 2 optimistic или синоним read остаться от jpa 1 — оптимистический блокировка 3 optimisticforceincrement или синоним write остаться от jpa 1 — оптимистический блокировка с принудительный увеличение поль версионность 4 pessimisticread — пессимистичный блокировка на чтение 5 pessimisticwrite — пессимистичный блокировка на запись и чтение 6 pessimisticforceincrement — пессимистичный блокировка на запись и чтение с принудительный увеличение поль версионность дробный сантиметр javadoc 7ee и описание оптимистичный и пессимистичный блокировка база дать вопрос 40 какой два вид кэш cache вы знаете в jpa и для что они нужный ответjpa говорить о два вид кэш cache 1 first-level cache кэш первое уровень — кэшировать дать один транзакция 2 second-level cache кэш два уровень — кэшировать дать долгий чем один транзакция провайдер jpa мочь но не обязать реализовывать работа с кэш два уровень такой вид кэш позволять сэкономить время доступ и улучшить производительность однако оборотный стороной являться возможность получить устаревший дать дробный сантиметр jpa 21 specification 39 caching оригиналthis specification supports the use of a second-level cache by the persistence provider the second-level cache if used underlies the persistence context and is largely transparent to the application a second-level cache is typically used to enhance performance use of a cache however may have consequences in terms of the up-to-dateness of the data seen by the application resulting in stale reads” a stale read is defined as the reading of entities or entity state that is older than the point at which the persistence context was started вопрос 41 какой есть вариант настройка second-level cache кэш два уровень в jpa или что аналогично описать какой значение мочь принимать элемент shared-cache-mode из persistencexml ответjpa говорить о пять значение shared-cache-mode из persistencexml который определять как быть использоваться second-level cache 1 all — весь entity мочь кэшироваться в кеш два уровень 2 none — кеширование отключить для весь entity 3 enableselective — кэширование работать только для тот entity у который установить аннотация cacheabletrue или её xml эквивалент для весь остальной кэширование отключить 4 disableselective — кэширование работать для весь entity за исключение тот у который установить аннотация cacheablefalse или её xml эквивалент 5 unspecified — кеширование не определённо каждый провайдер jpa использовать свой значение по умолчание для кэширование дробный сантиметр jpa 21 specification 39 caching оригиналthe shared-cache-mode element has five possible values all none enableselective disableselective unspecified вопрос 42 как можно изменить настройка fetch стратегия любой атрибут entity для отдельный запрос query или метод поиск find то если у enity есть атрибут с fetchtype = lazy но для конкретный запрос он требоваться сделать eager или наоборот ответдлить это существовать entitygraph api использоваться он так с помощь аннотация namedentitygraph для entity создаваться именовать entitygraph объект который содержимый список атрибут у который нужно поменять fetchtype на eager а потом данный имя указываться в hits запрос или метод find в результат fetchtype атрибут entity меняться но только для это запрос существовать два стандартный property для указание entitygraph в hit 1 javaxpersistencefetchgraph — весь атрибут перечисленный в entitygraph менять fetchtype на eager весь остальной на lazy 2 javaxpersistenceloadgraph — весь атрибут перечисленный в entitygraph менять fetchtype на eager весь остальной сохранять свой fetchtype то есть если у атрибут не указанный в entitygraph fetchtype быть eager то он и остаться eager с помощь namedsubgraph можно также изменить fetchtype вложить объект entity примеры// определять entity и entitygraph @entity @tablename = "order" @namedname = "graphorderitems" attributenodes = @namedattributenodeattributenodes = "items"  public class order implements serializable {  @onetomanymappedby = "order" fetch = fetchtypelazy private set<item> items = new hashset<item> @onetomanymappedby = "order" fetch = fetchtypeeager private set<features> features = new hashset<features> @onetomanymappedby = "order" fetch = fetchtypelazy private set<comment> comments = new hashset<comment>  // вызывать метод поиск c javaxpersistencefetchgraph  entitygraph graph = thisemgetentitygraph"graphorderitems" map hints = new hashmap hintsput"javaxpersistencefetchgraph" graph return thisemfindorderclass orderid hints // items в время запрос быть иметь fetchtype = eager а features и comments иметь fetchtype = lazy // вызывать метод поиск c javaxpersistenceloadgraph  entitygraph graph = thisemgetentitygraph"graphorderitems" map hints = new hashmap hintsput"javaxpersistenceloadgraph" graph return thisemfindorderclass orderid hints // items и features в время запрос быть иметь fetchtype = eager а comments весь также иметь fetchtype = lazy дробный сантиметр jpa 21 specification 37 entitygraph оригиналan entity graph can be used with the find method or as a query hint to override or augment fetchtype semantics the standard properties javaxpersistencefetchgraph and javaxpersistenceloadgraph are used to specify such graphs to queries and find operations вопрос 43 какой способ можно в код работать с кэш два уровень удалять весь или определённый entity из кеш узнать закэшироваться ли данный entity и тп ответдлить работа с кэш два уровень second level cache в jpa описать cache интерфейс содержимый большой количество метод по управление кэш два уровень second level cache если он поддерживаться провайдер jpa конечно объект данный интерфейс можно получить с помощь метод getcache у entitymanagerfactory дробный сантиметр jpa 21 specification 710 cache interface оригиналthe cache interface provides basic functionality over the persistence provider’s second level cache if used вопрос 44 какой способ можно получить метаданные jpa сведение о entity тип embeddable и managed класс и тп ответдлить получение такой информация в jpa использоваться интерфейс metamodel объект это интерфейс можно получить метод getmetamodel у entitymanagerfactory или entitymanager дробный сантиметр jpa 21 specification 5 metamodel api оригиналthis specification provides a set of interfaces for dynamically accessing the metamodel corresponding to the managed classes of a persistence unit вопрос 45 что такой jpql java persistence query language и чем он отличаться от sql ответjpql java persistence query language это язык запрос практически такой же как sql однако вместо имя и колонка таблица база дать он использовать имя класс entity и они атрибут в качество параметр запрос так же использоваться тип дать атрибут entity а не полый база дать в отличие от sql в jpql есть автоматический полиморфизм сантиметр следующий вопрос также в jpql использоваться функция который нет в sql такой как key ключ map' value значение map' treat для приведение суперкласс к он объект-наследник downcasting entry и тп дробный сантиметр jpa 21 specification chapter 4 query language оригиналthe java persistence query language is a string-based query language used to define queries over entities and their persistent state it enables the application developer to specify the semantics of queries in a portable way independent of the particular database schema in use in an enterprise environment the full range of the language may be used in both static and dynamic queries вопрос 46 что означать полиморфизм polymorphism в запрос jpql java persistence query language и как он «выключить ответво отличие от sql в запрос jpql есть автоматический полиморфизм то есть каждый запрос к entity возвращать не только объект это entity но так же объект весь он класс-потомок независимо от стратегия наследование например запрос select * from animal вернуть не только объект animal но и объект класс cat и dog который унаследовать от animal чтобы исключить такой поведение использоваться функция type в where условие например select * from animal a where typea in animal cat уже не вернуть объект класс dog дробный сантиметр jpa 21 specification chapter 4 query language оригиналjava persistence queries are automatically polymorphic an entity type expression can be used to restrict query polymorphism the type operator returns the exact type of the argument вопрос 47 что такой criteria api и для что он использоваться ответcriteria api это тоже язык запрос аналогичный jpql java persistence query language однако запрос основать на метод и объект то есть запрос выглядеть так criteriabuilder cb =  criteriaquery<customer> q = cbcreatequerycustomerclass root<customer> customer = qfromcustomerclass qselectcustomer дробный сантиметр jpa 21 specification chapter 6 criteria api оригиналthe java persistence criteria api is used to define queries through the construction of object-based query definition objects rather than use of the string-based approach of the java persistence query language described in chapter 4 отличие hibernate 50 от jpa 21 или jpa 20 от jpa 21 вопрос 48 в чем разница в требование к entity в hibernate от требование к entity указанный в спецификация jpa сантиметр вопрос 10 ответ 1 конструктор без аргумент не обязать быть public или protected рекомендоваться чтобы он быть хотя бы package видимость однако это только рекомендация если настройка безопасность java позволять доступ к приватный поль то он мочь быть приватный 2 jpa категорически требовать не использовать final класс hibernate лишь рекомендовать не использовать такой класс чтобы он мочь создавать проксить для ленивый загрузка однако позволять либо выключить проксить proxylazy=false либо использовать в качество проксить интерфейс содержимый весь метод маппинга для данный класс аннотация proxyproxyclass=интерфейсclass  дробный сантиметр hibernate 50 manual вопрос 49 какой уникальный стратегия наследование есть в hibernate но нет в спецификация jpa ответ в отличие jpa в hibernate есть уникальный стратегия наследование который называться implicit polymorphism дробный сантиметр hibernate 50 manual оригиналhibernate supports the three basic inheritance mapping strategies table per class hierarchy table per subclass table per concrete class in addition hibernate supports a fourth slightly different kind of polymorphism implicit polymorphism вопрос 50 какой основной новое возможность появиться в спецификация jpa 21 по сравнение с jpa 20 перечислить хотя бы пять-шесть новый возможность ответ в спецификация jpa 21 появиться 1 entity graphs — механизм динамический изменение fetchtype для каждый запрос 2 converters — механизм определение конвертер для задание функция конвертация атрибут entity в поль база дать 3 ddl генерация — автоматический генерация таблица индекс и схема 4 stored procedures — механизм вызов хранить процедура из jpa 5 criteria update/delete — механизм вызов bulk updates или deletes использовать criteria api 6 unsynchronized persistence contexts — появление возможность указать synchronizationtype 7 новое возможность в jpql/criteria api арифметический подзапрос generic database functions join on clause функция treat 8 динамический создание именовать запрос named queries дробный о изменение интерфейс и api в jpa 21 1 интерфейс entitymanager получить новое метод createstoredprocedurequery isjoinedtotransaction и createquerycriteriaupdate или criteriadelete 2 абстрактный класс abstractquery стать наследоваться от класс commonabstractcriteria появиться новое интерфейс criteriaupdate criteriadelete унаследовать commonabstractcriteria 3 persistenceprovider получить новое функция generateschema позволять генерить схема 4 entitymanagerfactory получить метод addnamedquery unwrap addnamedentitygraph createentitymanager с указание synchronizationtype 5 появиться новый enum synchronizationtype entity graphs storedprocedurequery и attributeconverter интерфейс дробный сантиметр java persistence 21 и java persistence 20 ps если найти технический ошибка ошибка в перевод или хотеть что-то добавить в тот число новое интересный вопрос быть благодарный если написать они в комментарий этот статья или в личка pps так же советовать посмотреть мой opensource проект [useful-java-links]https//githubcom/vedenin/useful-java-links/tree/master/link-rus — возможно наиболее полный коллекция полезный java библиотека фреймворок и русскоязычный обучать видео так же есть аналогичный [английский версия]https//githubcom/vedenin/useful-java-links/ это проект и начинать opensource подпроект [hello world]https//githubcom/vedenin/useful-java-links/tree/master/helloworlds по подготовка коллекция простой пример для разный java библиотека в один maven проект быть благодарный за любой помощь общий оглавление 'шпаргалок'1 jpa и hibernate в вопрос и ответ 2 триста пятьдесят самый популярный не мобильный java opensource проект на github 3 коллекция в java стандартный guava apache trove gs-collections и другой 4 java stream api 5 двести пятьдесят русскоязычный обучать видео доклад и лекция о java 6 список полезный ссылка для java программист 7 типовой задача 71 оптимальный путь преобразование inputstream в строка 72 самый производительный способ обход map' подсчёт количество вхождение подстрока 8 библиотека для работа с json gson fastjson logansquare jackson jsonpath и другой 