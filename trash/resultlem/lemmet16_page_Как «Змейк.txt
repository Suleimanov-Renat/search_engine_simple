как «змейка мочь познакомить с ооп сложный концепция простой слово здравствовать вы приветствовать редакция сайт geekbrainsru сервис онлайн-обучение программирование мы решить завести блог на хабра уверить что ещё успеть рассказать и обсудить много интересный из мир программирование ит и онлайн-образование но начать очень просто без особый прелюдия с обзор бесплатный курс по основа c# и ооп от один из наш ученик слогать курс гласить «сложный концепция простой слово давать же посмотреть насколько это соответствовать действительность пара слово о слушатель менеджер it-проект знак с процедурный программирование web-разработка sql более тесный знакомство с ооп понадобиться для глубокий внедрение в бизнес-процесс итак слово наш выпускник «быть такой программистский шутка язык программирование легко выучить — в отличие от иностранный язык в он совсем немного слово действительно выучить название команда функция библиотека тип дать и даже синтаксис не так сложно тем более что многие из они схожий в разный язык однако недаром высказывание назвать шутка — для тот чтобы работать с конкретный язык программирование нужно знать принцип основа парадигма стандарт язык объектно-ориентированный программирование как и любой парадигма программирование иметь набор принцип и правило который справедливый для весь язык и пригодиться в любой случай для себя я выбрать ознакомительный курс для освоение принцип объектно-ориентированный программирование который построить на создание рабочий проект на язык с# — консольный игра «змейка это тот самый змейка за который несколько поколение убивать время на лекция играть на тетрис и на чёрно-белый телефон nokia но должный сказать что писать свой игрушка значительно приятный а главный полезный в ход создание игра преподаватель раскрывать весь принцип ооп причём так что каждый принцип восприниматься не как навязать скучный теория а как решение уже назреть в голов вопрос «как упростить код и сделать он читабельный но весь по порядок в начало программа я погрузиться сразу в два современный инструмент который использовать разработчик visual studio — интегрировать среда разработка для ряд язык программирование именно в visual studio можно познакомиться с редактор исходный код дизайнер класс отладчик и консоль github — веб-сервис для хостинг it-проект и они совместный разработка базироваться на система управление версия git знакомство с он помогать понять как устроенный проект обратиться к открытый код скопировать он если это необходимый просмотреть предшествовать версия код для общение среда разработка и репозиторий код использоваться приложение smartgit выбрать язык — c# но как я уже понять из свой практика принцип ооп один и тот же и мочь быть легко применить при изучение другой язык изначально преподаватель делать акцент на тот что быть разрабатываться продукт выбор на змейка пасть неслучайно — весь известный логика игра её особенность и требование а в разработка важный уже на ранний этап иметь целостный представление о будущее проект такой видение помогать разбить он на значимый этап и избежать многий упущение один два урок простой и понятный любой человек даже совершенно не знакомый с программирование традиционно работа начинаться с счастливый ‘hello world’ namespace snake { class program { static void main string[] args  { consolewriteline"hello world" consolereadline } } } я ещё раз повторить для себя что такой функция как она работать как создаваться переменный для написание код использоваться процедурный подход — функция последовательно применяться принимать на вход задать параметр сразу становиться очевидный два недостаток создание всего код внутри главный функция main разрастание код и объявление переменный прямо внутри этот функция namespace snake { class program { static void main string[] args  { int x1 = 1 int y1 = 3 char sym1 = '*' draw x1 y1 sym1  int x2 = 4 int y2 = 5 char sym2 = '#' draw x2 y2 sym2  consolereadline } static void drawint x int y char sym { consolesetcursorposition x y  consolewrite sym  } } } действительно после один два занятие возникать чувство восторг от понимание довольно сложный вещий проверить на себя поэтому подписываться под комментарий слушатель на три лекция я познакомиться с понятие класс тип дать класс — один из основный понятие ооп поэтому он изучение уделяться пристальный внимание переменный начинать создаваться как экземпляр класс то есть объект отсюда и название ооп если слушатель начинающий то он учиться понимать язык код и выражение point p1 = new point начинать восприниматься как «создаваться объект точка p1 как экземпляр класс point принимать на вход координата namespace snake { class point { public int x public int y public char sym public void draw { consolesetcursorposition x y  consolewrite sym  } } } на это же занятие слушатель учиться думать как компьютер это происходить с помощь использование точка останов и проход по код через отладчик шаг за шагом можно видеть создание объект класс инициализация переменный работа функция вызов метод draw на четыре занятие создаваться конструктор класс point — явно написать конструктор с специальный синтаксис который ничто не возвращать public pointint x int y char sym { x = x y = y sym = sym } я заметить как сокращаться объём код основной программа после создание конструктор конструктор принимать на вход координата точка и символ её обозначение но деталь реализация пользователь не видеть — они скрытый внутри конструктор так я столкнуться с один из три принцип ооп — инкапсуляция инкапсуляция — это свойство система позволять объединять дать и метод работать с они в класс и скрыть весь деталь реализация от пользователь пять лекция погружать в вопрос организация память работа программа с стэк и куча объяснение дополнить наглядный схема после это начинаться работа с новый класс стандартный библиотека c# list список в который создаваться функция добавление и удаление элемент а также возникать цикл foreach list<int> numlist = new list<int> numlistadd 0  numlistadd 1  numlistadd 2  int x = numlist[ 0 ] int y = numlist[ 1 ] int z = numlist[ 2 ] foreachint i in numlist { consolewriteline i  } numlistremoveat 0  list<point> plist = new list<point> plistadd p1  plistadd p2  consolereadline } } работать с цикл в отладчик слушатель ещё более наглядно понимать структура и последовательность работа программа для цель реализация игра мы создать горизонтальный и вертикальный линия препятствие для змейка который представлять себя не что иной как список точка я стараться успевать следовать за преподаватель разбирать он код создавать свой и тренироваться уже в свой программа namespace snake { class horizontalline { list<point> plist public horizontallineint xleft int xright int y char sym { plist = new list<point> forint x = xleft x <= xright x++ { point p = new point x y sym  plistadd p  } } public void drow { foreachpoint p in plist { pdraw } } } } преподаватель отмечать что и точка и линия а в дальнейший и сам подвижный змейка по суть являться фигура поэтому должный существовать какой-то решение для оптимизация код который позволить не копировать код а переиспользовать он так я познакомиться с второе принцип ооп — наследование наследование — это свойство система позволять описывать новый класс на основа уже существующий с частично или полностью замещаться функциональность такой образ каждый линия змейка и точка становиться частное случаем наследоваться от класс фигура class horizontalline figure namespace snake { class figure { protected list<point> plist public void drow { foreach  point p in plist  { pdraw } } } } наследный класс обязательно содержимый признак родительский класс но мочь иметь и свой собственный пример наследование дополнительно разбираться на хрестоматийный и понятный пример класс работник унаследовать от класс человек иметь от родительский класс рост и возраст и свой признак — зарплата кстати для цель самостоятельный тренировка понимание наследование в ооп хороший всего работать именно с проектирование карточка студент или сотрудник — это я понять сразу сперва самостоятельно закреплять свой знание а потом уже работать с проект и вот змейка должный научиться двигаться в пол и управляться стрелка с клавиатура задача кажется сложный но я помнить что речь идти весь ещё о консоль и поэтому реализация передвижение змейка должный быть максимально простой я уже знать что змейка должный двигать в четыре направление что-то есть растить или уменьшаться и вот тут наступать пора абстрагирование — ситуация при который код писаться на основа выбрать значимый характеристика объект а незначительный — исключаться выбирать значимый признак змейка — это фигура из точка на карта у она есть стартовый позиция координата и она двигаться в один из четыре направление класс snake серьёзно изменяться и расти { class snake  figure { public snake point tail int length direction direction  direction direction public snake point tail int length direction direction  { direction = direction plist = new list<point> forint i = 0 i < length i++ for  int i = 0 i < length i++  { point p = new point tail  pmove i direction  plistadd p  } } internal void move { point tail = plistfirst plistremove tail  point head = getnextpoint plistadd head  tailclear headdraw } public point getnextpoint { point head = plistlast point nextpoint = new point head  nextpointmove 1 direction  return nextpoint } } } вообще если продолжить говорить о абстрагирование в ооп широко использоваться понятие абстрактный класс создаваться шаблонный класс который реализовать только известный и нужный разработчик на данный момент функциональность класс производный от абстрактный весь функциональность в дальнейший смочь дополнить но вернуться к проект появляться класс direction направление в который использоваться ещё один тип дать enum — перечисление состоять из набор именовать константа в наш случай это константа-направление right left up down у класс point появляться метод move public void moveint offset direction direction { ifdirection == directionright { x = x + offset } else ifdirection == directionleft { x = x - offset } else ifdirection == directionup { y = y + offset } else ifdirection == directiondown { y = y - offset } } такой образ передвижение змейка реализовать как сдвиг позиция с перетирание хвост пробел змейка управляться клавиш и управление реализовать следующий образ public void handlekeyconsolekey key { if  key == consolekeyleftarrow  direction = directionleft else if  key == consolekeyrightarrow  direction = directionright else if  key == consolekeydownarrow  direction = directiondown else if  key == consolekeyuparrow  direction = directionup } вновь я столкнуться с инкапсуляция — управление змейка уходить в класс snake на следующий этап змейка начинать есть и добыча создаваться в бесконечный цикл с помощь функция foodcreator проверяться совпадение координата голов змейка и точка представлять себя еда while true { ifsnakeeat food   { food = foodcreatorcreatefood fooddraw } else { snakemove } threadsleep 100  if consolekeyavailable { consolekeyinfo key = consolereadkey snakehandlekey keykey  } } создавать препятствие для кушать в бесконечный цикл змейка и работать над класс wall я узнать о три парадигма ооп — полиморфизм способность функция обрабатывать дать разный тип в ооп полиморфизм заключаться в тот что объект использовать метод производный класс который нет на момент создание базовый в время выполнение объект производный класс мочь рассматриваться как объект базовый класс в такой место как параметр метод коллекция или массив когда это происходить объявить тип переставать соответствовать самый тип в время выполнение сразу оговориться что полиморфизм пониматься не сразу я понадобиться послушать лекция ещё раз и обратиться к замечательный учебник шилдт который давно лежалый под рука и ждать свой час на последний занятие змейка стать вполне самостоятельный а я учиться обрабатывать столкновение с препятствие и собственный хвост змейка код в лекция уже не создаваться а браться из репозиторий и разбираться я не пойти на повод у соблазн скопировать чужой код а некоторый время после прослушивание курс создавать свой раз за разом обращаться к лекция вы я советовать поступать точно так же — потому что для работа и понимание нужный знание надеяться я дать достаточно тизер чтобы вы захотеться зайти на github и разобраться в реализация простой игра основной код который составлять всего 52 строка а это значит что весь принцип ооп быть успешно применить подводить итог преподаватель ещё раз возвращаться к главное парадигма ооп и обращать внимание на модификатор доступ public и private и рассказывать о ключевой слово virtual благодаря который метод мочь быть переопределить в наследный класс private — это закрытый дать и код внутри объект public — открытый закрытый дать и код доступный только из другой часть это же объект то есть извне к он обратиться нельзя открытый дать и код доступный из люба часть программа и нередко служить интерфейс к закрытый часть объект если говорить о курс в целое то он я помочь — измениться и качество мой работа и уровень общение с разработчик советовать попробовать весь кома хоть немного интересно программирование как минимум это развивать мозг и учить думать системно я точно вернуться послушать другой курс и пообщаться с профессионал ну а отважный новичок желать удача вы заметить насколько популярный стать видеоформат в контент реклама управление общеизвестно что видео задействовать сразу и зрение и слух а значит восприниматься хороший к тот же видеокурс можно остановить перемотать прослушать ещё несколько раз задать вопрос в комментарий плюс к весь в geekbrains преподавать практика для который программирование — ежедневный работа и поэтому они всегда в курс самый последний тенденция свой отрасль конечно просмотр курс с стакан чай перед монитор принести мало польза поэтому в заключение хотеть дать несколько совет слушатель слушать курс с карандаш или ручка — записывать момент который стоить переслушать или дополнительно посмотреть в интернет или книга не пропускать непонятный момент стараться разобраться обращаться к дополнительный источник не копировать код создавать свой — только это позволить вы по-настоящему научиться работать с код работать с отладчик — знание тот как пошаговый работать программа помогать создавать стройный и понятный функция возвращаться к теория и курс даже когда вы уже смочь создать свой приложение — это помогать упорядочить знание и найти новый точка для развитие мы уверить что время на самообразование никогда не бывать потратить зря оно обязательно окупиться 