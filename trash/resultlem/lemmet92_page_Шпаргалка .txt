шпаргалка java программист 8 библиотека для работа с json gson fastjson logansquare jackson jsonpath и другой в один из мой прошлое стать я рассказывать о свой opensorce pet проект useful-java-links идея который собрать как можно большой ссылка на полезный java библиотека и фреймворка у он так же есть подпроект hello world project идея который для каждый библиотека собрать несколько простой пример её использование проблема программист в java мир в тот что кроме стандартный библиотека jdk есть огромный другой полезный библиотека причём переход от один библиотека к другой мочь вызывать проблема из-за неполный документация отсутствие простой пример или даже сложность понять какой зависимость нужно добавить в maven чтобы весь запуститься а на новый работа вполне мочь использовать вместо твой любимый библиотека тот который ты не знаешь идея мой проект облегчить изучение и выбор разный библиотека общий оглавление 'шпаргалок'1 jpa и hibernate в вопрос и ответ 2 триста пятьдесят самый популярный не мобильный java opensource проект на github 3 коллекция в java стандартный guava apache trove gs-collections и другой 4 java stream api 5 двести пятьдесят русскоязычный обучать видео доклад и лекция о java 6 список полезный ссылка для java программист 7 типовой задача 71 оптимальный путь преобразование inputstream в строка 72 самый производительный способ обход map' подсчёт количество вхождение подстрока 8 библиотека для работа с json gson fastjson logansquare jackson jsonpath и другой итак давать посмотреть какой известный библиотека есть для работа с json в java… цитата из useful-java-links 8 работа с json8 работа с json json парсер alibaba fastjson быстрый json обработчик рейтинг github' — 4851 user guide и hello world examples лицензия apache 2 gson — простой сериализация объект в json и обратно хороший производительность и лёгкость в использование рейтинг github' — 4120 user guide и hello world examples лицензия apache 2 logansquare -библиотека парсинга и сериализация json основать на jackson's streaming api по слово разработчик превосходить по производительность gson и jackson библиотека рейтинг github' — 2188 user guide и hello world examples лицензия apache 2 json java реализация работа с json в java от разработчик json стандарт рейтинг github' — 1937 user guide и hello world examples лицензия crockford's license mit license + "good not evil" square moshi json библиотека для android и java служить для упрощение парсинга json в объект java рейтинг github' — 1732 user guide и hello world examples лицензия apache 2 instagram ig json parser быстрый json парсер для java проект рейтинг github' — 921 user guide и hello world examples лицензия bsd 3 jackson — похоже на gson но более производительный если вы нужно часто создавать экземпляр библиотека подпроект jackson core базовый часть функционал jackson databind базовый реализация databind' рейтинг github' — 881 user guide и hello world examples лицензия apache 2 genson — мощный и простой в использование java библиотека для преобразование в/из json рейтинг github' — 108 user guide и hello world examples лицензия apache 2 аналог xpath для json jayway jsonpath java jsonpath — реализация аналог xpath только для json а не xml рейтинг github' — 849 user guide и hello world examples лицензия apache 2 alibaba fastjson быстрый json обработчик рейтинг github' — 4851 user guide и hello world examples лицензия apache 2 генерация java класс из json или json схема и json валидация jsonschema2pojo генерация java класс из json схема или пример json с аннотация для data-binding для jackson 1x or 2x gson и том плата рейтинг github' — 1664 user guide и hello world examples лицензия apache 2 json schema validator валидация json схема реализовать на чистый java создать с цель проверка json файл использовать json схема так же мочь генерировать java класс из схема и наоборот рейтинг github' — 547 user guide и hello world examples лицензия gnu lesser 3/apache 2 итак у мы восемь библиотека для сериализация и десериализация в json два библиотека для генерация java класс по схема или json файл один библиотека для валидация схема и два аналог xpath но для json давать рассмотреть каждый из они 1 json парсер существовать три основный способ сериализация и десериализация среди указанный библиотека от самый простой к самый сложный и один дополнительный data bind tree model streaming api и дополнительный способ аналог xpath давать рассмотреть с чем они есть data bind самый популярный и простой способ вы просто указывать класс который нужно преобразовать в json мочь быть часть полый отмечать аннотация а зачастую даже это необязательно а библиотека сам превращать этот класс и весь он иерархия класс в json аналог при работа с xml быть jaxb java architecture for xml binding плюс наиболее простой из весь по суть главный реализовать только java класс более тот можно просто сгенерировать java класс из json'a или json схема минус скорость и память большинство библиотека использовать рефлексия и тп метод работа с java класс хотя не весь что очевидно не очень быстро к тот же весь json файл сразу превращаться в java объект что мочь просто исчерпать весь доступный память если вы попытаться обработать очень большой json вывод если нет проблема с производительность память и вы не собираться обрабатывать многогигабайтный json' скорее всего самый хороший способ tree model — данный парсер представлять json в вид java класс такой как node или jsonelement c иерархический структура а уже сам программист они обходить и получать из они информация данный способ похожий на dom парсер в xml плюс обычно быстрый первое способ и простой третье минус уступать data bind по простота плюс ряд библиотека способный генерить класс при data bind а не использовать рефлексия в это случай то что tree model быть быстрый не очевидно к тот же не решаться проблема огромный файл и ограничение память streaming api — самый низкоуровневый способ по суть программист сам вручную разбирать токен json'a зато никакой ограничение по память и в теория максимальный производительность плюс производительность и минимальный потребление память минус сложность использование аналог xpath — дополнительный способ не очень подходить если нужно получить весь информация из json'a зато позволять написать выражение $storebook[*]author и получить список весь автор весь книга из json'a магазин то есть легко получать часть информация из json' плюс позволять быстро получить информация из json' по сложный критерий минус не очень подходить когда нужный весь информация из json' не работать в обратный сторона на формирование json' 11 обзор библиотека способ fastjson gson logansquare json java moshi ig json parser jackson genson jsonpath 1 data bind да да да - да да да да - 2 tree model - да - да - - да - - 3 streaming api - да - - - - да - - 4 аналог xpath да - - - - - - - да 5 генерация класс для data bind* - - да - - да - - - 6 github's star 4851 4120 2188 1937 1732 921 881 108 849 7 работать с static inner class** да да нет - да нет да да - 8 обязательность аннотаций*** нет нет да - нет да нет нет - по ссылка на да можно найти пример использование * — генерация класс для data bind позволять сгенерировать класс на стадия компиляция что в теория должный давать значительный прирост производительность библиотека ** — работать с static inner class иметь смысл только для случай data bind возможно ли сериализация и десериализация для случай статический внутренний класс не статический внутренний класс сериализовать не рекомендоваться *** — тоже только для случай data bind можно ли не использовать аннотация или они использование крайне рекомендоваться 12 простейшее пример использование data bind для демонстрация работа библиотека быть использовать следующий json jsonstring = { "message" "hi" "place" { "name" "world" } } и следующий java класс в разный пример мочь слегка отличаться наличие аннотация если они обязательный java класс class human { private string message private place place public string getmessage { return message } public void setmessagestring message { thismessage = message } public place getplace { return place } public void setplaceplace place { thisplace = place } public void say { systemoutprintln systemoutprintlngetmessage + "  " + getplacegetname + "" } } class place { private string name public string getname { return name } public void setnamestring name { thisname = name } } // init class place place = new place placesetname"world" human human = new human humansetmessage"hi" humansetplaceplace как можно увидеть java класс всего лишь состоять из два класс human и place в который храниться сообщение hi world json тоже содержимый этот два вложить объект пример использование data bind способ fastjson gson logansquare moshi ig json parser jackson genson инициализация --- gson gson = new gson --- moshi moshi = new moshi builderbuild jsonadapter<human> jsonadapter = moshiadapterhumanclass --- objectmapper mapper = new objectmapper genson genson = new genson из java в json jsontojsonstringhuman gsontojsonhuman logansquareserializehuman jsonadaptertojsonhuman humanjsonhelperserializetojsonhuman mapperwritevalueasstringhuman gensonserializehuman из json в java jsonparseobjectjsonstring humanclass gsonfromjsonjsonstring humanclass logansquareparsejsonstring humanclass jsonadapterfromjsonjsonstring humanjsonhelperparsefromjsonjsonstring mapperreadvaluejsonstring humanclass gensondeserializejsonstring humanclass humanjsonhelper — это класс который ig json parser сгенерировать на этап компиляция у logansquare так же есть генерация на этап компиляция но там класс подключаться "под капотом" внутри logansquare давать рассмотреть пример дробный fastjson // convert to json string jsonstring = jsontojsonstringhuman systemoutprintln"json " + jsonstring // напечатать "json {"message""hi""place"{"name""world"}}" // convert from json human newhuman = jsonparseobjectjsonstring humanclass newhumansay // напечатать "hi  world" подробный пример gson // convert to json gson gson = new gson string jsonstring = gsontojsonhuman systemoutprintln"json " + jsonstring // напечатать "json {"message""hi""place"{"name""world"}}" // convert from json human newhuman = gsonfromjsonjsonstring humanclass newhumansay // напечатать "hi  world" подробный пример logansquare@jsonobject public class human { @jsonfieldname="message" public string message @jsonfieldname="place" public place place  // convert to json string jsonstring = logansquareserializehuman systemoutprintln"json " + jsonstring // напечатать "json {"place"{"name""world"}"message""hi"}" // convert from json human newhuman = logansquareparsejsonstring humanclass newhumansay // напечатать "hi  world" подробный пример moshi // convert to json moshi moshi = new moshibuilderbuild jsonadapter<human> jsonadapter = moshiadapterhumanclass string jsonstring = jsonadaptertojsonhuman systemoutprintln"json " + jsonstring // напечатать "json {"message""hi""place"{"name""world"}}" // convert from json human newhuman = jsonadapterfromjsonjsonstring newhumansay // напечатать "hi  world" подробный пример ig json parser@jsontype public class human { @jsonfieldfieldname="message" public string message @jsonfieldfieldname="place" public place place  // convert to json string jsonstring = humanjsonhelperserializetojsonhuman systemoutprintln"json " + jsonstring // напечатать "json {"place"{"name""world"}"message""hi"}" // convert from json human newhuman = humanjsonhelperparsefromjsonjsonstring newhumansay // напечатать "hi  world" подробный пример jackson // convert to json objectmapper mapper = new objectmapper string jsonstring = mapperwritevalueasstringhuman systemoutprintln"json " + jsonstring // напечатать "json {"message""hi""place"{"name""world"}}" // convert from json human newhuman = mapperreadvaluejsonstring humanclass newhumansay // напечатать "hi  world" подробный пример genson // convert to json string jsonstring = new gensonserializehuman systemoutprintln"json " + jsonstring // напечатать "json {"message""hi""place"{"name""world"}}" // convert from json human newhuman = new gensondeserializejsonstring humanclass newhumansay // напечатать "hi  world" подробный пример для изучение более сложный пример библиотека сантиметр раздел документация и генерация java класс из json использовать генерация можно быстро получить нужный java класс с весь аннотация для библиотека jackson или gson 13 простейшее пример использование tree model использование tree model есть у три библиотека gson jackson и json java давать посмотреть они реализация для демонстрация работа библиотека быть использовать тот же json jsonstring = { "message" "hi" "place" { "name" "world" } } метод парсинга json'a действие gson jackson json java инициализация jsonparser parser = new jsonparser new objectmapper - парсинга json'a parserparse<строка> mapperreadvalue<строка> jsonnodeclass new jsonobject<строка> получение главный объект rootgetasjsonobject - - получение строка rootget<имя>getasstring rootget<имя>astext rootgetstring<имя> получение дочерний объект rootgetasjsonobject<имя> rootget<имя> rootgetjsonobject<имя> метод генерация json'a действие gson jackson json java инициализация - new objectmapper - создание главный объект new jsonobject mappercreateobjectnode new jsonobject добавить строковый пол rootaddproperty<имя> <строка> rootput<имя> <строка> rootput<имя> <строка> добавить дочерний объект rootadd<имя> <объект> rootputobject<имя> rootput<имя> <объект> пример 1 чтение gson чтение json с помощь gson jsonparser parser = new jsonparser jsonelement jsonelement = parserparse"{\"message\"\"hi\"\"place\"{\"name\"\"world\"}}" jsonobject rootobject = jsonelementgetasjsonobject // чтение главный объект string message = rootobjectget"message"getasstring // получить пол "message" как строка jsonobject childobject = rootobjectgetasjsonobject"place" // получить объект place string place = childobjectget"name"getasstring // получить пол "name" systemoutprintlnmessage + " " + place // напечатать "hi world"*/ подробный пример 2 генерация gson генерация json с помощь gson jsonobject rootobject = new jsonobject // создавать главный объект rootobjectaddproperty"message" "hi" // записывать текст в пол "message" jsonobject childobject = new jsonobject // создавать объект place childobjectaddproperty"name" "world" // записывать текст в пол "name" у объект place rootobjectadd"place" childobject // сохранять дочерний объект в пол "place" gson gson = new gson string json = gsontojsonrootobject // генерация json строка systemoutprintlnjson // напечатать "{"message""hi""place"{"name""world"}}" подробный пример 3 чтение jackson чтение json с помощь jackson objectmapper mapper = new objectmapper jsonnode rootnode = mapperreadvalue"{\"message\"\"hi\"\"place\"{\"name\"\"world\"}}" jsonnodeclass // парсинга текст string message = rootnodeget"message"astext // получение строка из поль "message" jsonnode childnode = rootnodeget"place" // получать объект place string place = childnodeget"name"astext // получать строка из поль "name" systemoutprintlnmessage + " " + place // напечатать "hi world" подробный пример 4 генерация jackson генерация json с помощь jackson outputstream outputstream = new bytearrayoutputstream objectmapper mapper = new objectmapper objectnode rootnode = mappercreateobjectnode // создание главный объект rootnodeput"message" "hi" objectnode childnode = rootnodeputobject"place" // создание дочерний объект place childnodeput"name" "world" mapperwritevalueoutputstream childnode // запись json строка в стрим systemoutprintlnoutputstreamtostring // напечатать "{"message""hi""place"{"name""world"}}" подробный пример 5 чтение и генерация json java и json java эталонный реализация от разработчик стандарт json который использовать jsonobject чтение и генерация json с помощь json java // convert java to json jsonobject root = new jsonobject // создавать главный объект rootput"message" "hi" jsonobject place = new jsonobject // создавать объект place placeput"name" "world" rootput"place" place // сохранять объект place в пол place string json = roottostring systemoutprintlnjson // напечатать "{"message""hi""place"{"name""world"}}" systemoutprintln // convert json to java jsonobject jsonobject = new jsonobjectjson // парсинга json string message = jsonobjectgetstring"message" string name = jsonobjectgetjsonobject"place"getstring"name" systemoutprintlnmessage + " " + name // напечатать "hi world" подробный пример в общий можно заметить что в весь библиотека выполняться примерно тот же действие отличаться только название класс 14 простейшее пример использование streaming api для демонстрация работа библиотека быть использовать весь тот же json jsonstring = { "message" "hi" "place" { "name" "world" } } обычно streaming api использоваться крайне редко только в задача требовать очень высокий производительность или при очень больший файл метод парсинга json'a действие gson jackson инициализация - new jsonfactory парсинга json'a reader = new jsonreader<inputstream> parser = jsonfactorycreateparser<строка> проверка есть ли ещё токен readerhasnext parserhascurrenttoken получение тип токен readerpeek parsernexttoken получение следующий токен readernextstring readerbeginobject readerendobject и тп parsernexttoken пропуск токен readerskipvalue parsernexttoken получение строка readernextstring parsergettext метод генерация json'a действие gson jackson инициализация writer = new jsonwriter<outputstream> generator = new jsonfactorycreategenerator<outputstream> <кодировка> токен начало объект writerbeginobject generatorwritestartobject токен окончание объект writerendobject generatorwriteendobject токен имя поль writername<имя> generatorwritefieldname<имя> токен строковый значение writervalue<строка> generatorwritestringfield<имя> <строка> пример 1 чтение в gson чтение json c помощь gson string str = "{\"message\"\"hi\"\"place\"{\"name\"\"world\"}}" inputstream in = new bytearrayinputstreamstrgetbytescharsetforname"utf-8" jsonreader reader = new jsonreadernew inputstreamreaderin "utf-8" while readerhasnext { // обходить весь токен jsontoken jsontoken = readerpeek // получать тип следующий токен ifjsontoken == jsontokenbeginobject { // если начать объект readerbeginobject } else ifjsontoken == jsontokenendobject { // если конец объект readerendobject } ifjsontoken == jsontokenstring { // в случай если токен строковый знание - выводить на экран systemoutprintreadernextstring + " " // напечатать hi world } else { readerskipvalue // пропускать весь прочий токен } } readerclose подробный пример 2 запись в gson генерация json c помощь gson outputstream outputstream = new bytearrayoutputstream jsonwriter writer = new jsonwriternew outputstreamwriteroutputstream "utf-8" writerbeginobject // создавать токен начало главный объект writername"message" // записывать пол message writervalue"hi" writername"place" // сохранять объект place в пол place writerbeginobject // начинать объект place writername"name" writervalue"world" writerendobject // закрывать объект place writerendobject // закрывать главный объект writerclose systemoutprintlnoutputstreamtostring // напечатать "{"message""hi""place"{"name""world"}}" подробный пример 3 чтение в jackson чтение json c помощь jackson jsonfactory jsonfactory = new jsonfactory jsonparser jsonparser = jsonfactorycreateparser"{\"message\"\"hi\"\"place\"{\"name\"\"world\"}}" jsontoken jsontoken = jsonparsernexttoken whilejsonparserhascurrenttoken { // обходить токен ifjsontoken == valuestring { // в случай если токен строковый знание - выводить на экран systemoutprintjsonparsergettext + " " // напечатать "hi world" } jsontoken = jsonparsernexttoken } подробный пример 2 запись в jackson генерация json c помощь jackson jsonfactory jsonfactory = new jsonfactory outputstream outputstream = new bytearrayoutputstream jsongenerator jsongenerator = jsonfactorycreategeneratoroutputstream jsonencodingutf8 jsongeneratorwritestartobject // создавать токен начало главный объект jsongeneratorwritestringfield"message" "hi" // создавать пол message jsongeneratorwritefieldname"place" jsongeneratorwritestartobject // начинать объект place jsongeneratorwritestringfield"name" "world" jsongeneratorwriteendobject // закрывать объект place jsongeneratorwriteendobject // закрывать главный объект jsongeneratorclose systemoutprintlnoutputstreamtostring // напечатать "{"message""hi""place"{"name""world"}}" подробный пример 14 использование аналог xpath для json метод действие jsonpath fastjson получение значение по фильтр jsonpathread<json> <шаблон> jsonpatheval<javaобъект> <шаблон> получение коллекция по фильтр jsonpathread<json> <шаблон> jsonpatheval<javaобъект> <шаблон> давать посмотреть пример быть использовать весь тот же json jsonstring = { "message" "hi" "place" { "name" "world" } } c помощь jsonpath string jsonhiworld = "{\"message\"\"hi\"\"place\"{\"name\"\"world\"}}\"" string message = jsonpathreadjsonhiworld "$message" string place = jsonpathreadjsonhiworld "$placename" systemoutprintlnmessage + " " + place // напечатать "hi world" подробный пример c помощь fastjson // преобразование из json'a в java объект string jsonstring = "{\"message\"\"hi\"\"place\"{\"name\"\"world\"}}\"" human newhuman = jsonparseobjectjsonstring humanclass // поиск информация в java объект использовать eval object message = jsonpathevalnewhuman "$message" object world = jsonpathevalnewhuman "$placename" systemoutprintlnmessage + " " + world // print hi world подробный пример более сложный пример с jsonpath list<string> authors = jsonpathreadjson "$storebook[*]author" systemoutprintln"authors " + authors // print ["nigel rees""evelyn waugh""herman melville""j r r tolkien"] list<map<string object>> expensivebooks = jsonpath usingconfigurationdefaultconfiguration parsejson read"$storebook[@price > 22]title" listclass systemoutprintlnexpensivebooks // print ["hello middle-earth "] где json это json = string json = "{\n" + " \"store\" {\n" + " \"book\" [\n" + " {\n" + " \"category\" \"reference\"\n" + " \"author\" \"nigel rees\"\n" + " \"title\" \"sayings of the century\"\n" + " \"price\" 895\n" + " }\n" + " {\n" + " \"category\" \"fiction\"\n" + " \"author\" \"evelyn waugh\"\n" + " \"title\" \"sword of honour\"\n" + " \"price\" 1299\n" + " }\n" + " {\n" + " \"category\" \"fiction\"\n" + " \"author\" \"herman melville\"\n" + " \"title\" \"moby dick\"\n" + " \"isbn\" \"0-553-21311-3\"\n" + " \"price\" 899\n" + " }\n" + " {\n" + " \"category\" \"fiction\"\n" + " \"author\" \"j r r tolkien\"\n" + " \"title\" \"hello middle-earth \"\n" + " \"isbn\" \"0-395-19395-8\"\n" + " \"price\" 2299\n" + " }\n" + " ]\n" + " \"bicycle\" {\n" + " \"color\" \"red\"\n" + " \"price\" 1995\n" + " }\n" + " }\n" + " \"expensive\" 10\n" + "}" подробный пример 2 генерация java класс по json схема и валидация json остаться рассмотреть вопрос генерация java класс и валидация json советовать посмотреть следующий два online ресурс jsonschema2pojoorg — ресурс от разработчик библиотека jsonschema2pojo он позволять из json' или json схема сгенерировать соответствующий класс для библиотека jackson один и два версия и gson с весь аннотация очень удобный ресурс для быстрый использование этот библиотека достаточно только иметь пример json' или json схема json-schema-validatorherokuappcom — ресурс от разработчик json-schema-validator он позволять проверить json схема сгенерировать java класс по схема и тд давать рассмотреть вариант использование этот библиотека в java код пример генерация java класс из json' использовать jsonschema2pojo // init json string source = "{\n" + " \"type\"\"object\"\n" + " \"properties\" {\n" + " \"messagehiworld\" {\n" + " \"type\" \"string\"\n" + " }\n" + " \"bar\" {\n" + " \"type\" \"integer\"\n" + " }\n" + " \"baz\" {\n" + " \"type\" \"boolean\"\n" + " }\n" + " }\n" + "}" // init config jcodemodel codemodel = new jcodemodel generationconfig config = new defaultgenerationconfig { @override public boolean isgeneratebuilders { // set config option by overriding method return true } } // generate java pojo from json schemamapper mapper = new schemamappernew rulefactoryconfig new jackson2annotator new schemastore new schemagenerator mappergeneratecodemodel "helloworldclass" "comgithubvedenin" source // save generated class to file file directory = new file"helloworlds/38-json/jsonschema2pojo/output" directorymkdirs codemodelbuilddirectory // show generated class file cls = new file"helloworlds/38-json/jsonschema2pojo/output/com/github/vedenin/helloworldclassjava" string codehelloworld = filestostringcls charsetsutf8 systemoutprintlncodehelloworld подробный пример пример валидация json файл соответственно схема использовать json-schema-validator final jsonnode fstabschema = utilsloadresource"/fstabjson" final jsonnode good = utilsloadresource"/fstab-goodjson" final jsonnode bad = utilsloadresource"/fstab-badjson" final jsonnode bad2 = utilsloadresource"/fstab-bad2json" final jsonschemafactory factory = jsonschemafactorybydefault final jsonschema schema = factorygetjsonschemafstabschema processingreport report report = schemavalidategood systemoutprintlnreport report = schemavalidatebad systemoutprintlnreport report = schemavalidatebad2 systemoutprintlnreport подробный пример пример использование maven plugin для генерация класс по схема json использовать jsonschema2pojo1 в maven добавлять следующий код менять sourcedirectory где лежать схема json и targetpackage пакет у сгенерированый класс <build> <plugins> <plugin> <groupid>orgjsonschema2pojo</groupid> <artifactid>jsonschema2pojo-maven-plugin</artifactid> <version>0422</version> <configuration> ```${basedir}/src/main/resources</sourcedirectory> <targetpackage>comgithubvedenin</targetpackage> </configuration> <executions> <execution> <goals> <goal>generate</goal> </goals> </execution> </executions> </plugin> </plugins> </build> 2 положить нужный схема json в sourcedirectory 3 после запуск install maven'a по весь схема быть сгенерировать java класс подробный пример 3 документация документация весь библиотека json парсер alibaba fastjson gson logansquare json java square moshi instagram ig json parser jackson genson аналог xpath для json jayway jsonpath alibaba fastjson генерация java класс из json или json схема и json валидация jsonschema2pojo json schema validator весь пример alibaba fastjson gson logansquare json java square moshi instagram ig json parser jackson genson jayway jsonpath jsonschema2pojo json schema validator 4 заключение надеяться вы понравиться этот статья более подробный информация о библиотека и пример код можно найти на github'e версия на английский язык можно найти здесь обновлять версия на русский быть на github'e помощь проект быть благодарный как за добавление новый полезный ссылка в список библиотека так за добавление hello world пример и за исправление русский и английский грамматика в статья сантиметр дробный тут быть благодарный так же за любой замечание и добавление общий оглавление 'шпаргалок'1 jpa и hibernate в вопрос и ответ 2 триста пятьдесят самый популярный не мобильный java opensource проект на github 3 коллекция в java стандартный guava apache trove gs-collections и другой 4 java stream api 5 двести пятьдесят русскоязычный обучать видео доклад и лекция о java 6 список полезный ссылка для java программист 7 типовой задача 71 оптимальный путь преобразование inputstream в строка 72 самый производительный способ обход map' подсчёт количество вхождение подстрока 8 библиотека для работа с json gson fastjson logansquare jackson jsonpath и другой 