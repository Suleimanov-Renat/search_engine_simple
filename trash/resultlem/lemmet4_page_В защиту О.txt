в защита ооп 7 несостоятельный аргумент он противник когда я так сказать пройтись по интернет я заметить один интересный особенность весь парадигма программирование где-либо обсуждать восприниматься человек совершенно спокойно если например говорят про процедурный программирование то говорят про он абсолютно спокойно то же самый — про модульный программирование декларативный программирование — никакой буря волнение или холивар функциональный программирование — то же самый и только вокруг ооп не утихать буря один визжать от он в восторг другой наоборот хаят на что свет зиждиться и я честно сказать совершенно непонятно почему на ооп весь мир клин сойтись возможно вы только что подумать что я — скорее противник чем сторонник ооп это абсолютно не так впрочем вы это мочь понять из заголовок нет я — скорее противник «серебряный пуля хайп возведение какой-либо методология или человек на престол и всяческий вождение хоровод вы же не водить хоровод вокруг скажем гаечный ключ или газонокосилка и не писать я надеяться публикация почему дрель или молоток — отстой но на сегодняшний день весь интернет кишеть именно напыщенный гиперэмоциональный радикалистский статья по повод ооп — если один говорить что ооп — «зер гута и вообще весь гута гута — то другой обязательно вещать что ооп необходимый срочно выкинуть на помойка если только он не разделять взгляд первое третье не дать я же хотеть именно привнести три элемент спокойно без хайп и ругань рассказать почему ооп — не эликсир от весь болезнь но также как и пп фп или лп иметь право на существование итак спокойный статья в защита ооп в она я попытаться рассмотреть основной довод противник ооп и обосновать они несостоятельность 1 весь что есть в ооп уже давно есть в другой парадигма почти весь язык программирование являться тьюринг-полный за исключение язык разметка как то html xml css и тд если говорить крестьянский язык тьюринг-полный язык — язык на который можно написать абсолютно любой мыслить программа из это следовать довольно-таки всеобщий тезис то что есть в любой наудачу выбрать язык есть в весь остальной язык то же можно сказать и про парадигма весь отличие язык и парадигма — это разный способ реализация тот или иной команда не считать отдельный лексический особенность кстати этот же тезис весь что есть в n есть и в m и в k и в r и тд можно сформулировать так молоток уже состоять из железо да дерево зачем же мы ещё и пассатижи но ведь так никто не стать утверждать 2 ооп смешивать дать и действие над они это плохо аргумент высосать из палец во-первых где ооп смешивать дать и функция во-вторых утверждение что это плохо тоже взять от фонарь из бочка «настоящий мужик так не делать а почему — да потому что гладиолус ооп в какой-то род моделировать реальный мир где дать присущий объект — никто ведь не стать утверждать что у стул отсутствовать цвета и у он не четыре нога и никакой смешение дать и операция здесь не происходить объект — это не функция и не оператор это абстракция 3 наследование закрепощать программа делать трудный внесение изменение тут можно немного притормозить наследование вовсе не предполагать выстраивание километровый дерево с цель замедлять разработка наследование придумать для тот чтобы выделять общий свойство и метод в суперкласс причём делать это нужно с класс представлять однотипный объект ошибка быть создавать например два класс один из который — наследник другой ибо здесь нет выделение общий код в суперкласс просто потому что здесь нет ничто общий если не предполагаться расширять родительский класс три класс — такой наследование попросту бессмысленно если вы создавать магазин спиртное напиток то класс beer vodka и vine можно унаследовать от класс alcohol но совершенно не нужно создавать ещё и класс drinks если только вы не хотеть продавать ещё и скажем парагвайский чаять также ошибка быть создание иерархия в который класс никак не относиться друг к друг ну зачем рассказать я городить башня где класс муха и котлета наследоваться от суперкласс сыр который в свой очередь наследоваться от суперкласс пятница но это уже не недостаток ооп а кривая рука тот кто такой сочинять 4 инкапсуляция не иметь смысл вот тут я частично согласный с точка зрение работа программа инкапсуляция действительно ни на что не влиять если я закрой переменный с помощь private — ну и что я весь равно смочь её открыть просто убрать private а потом менять там весь что душа заблагорассудиться но это верно лишь чисто технически философия ооп гласить правильно организовать и инкапсулированный класс можно рассматривать как чёрный ящик представить себя коробка на один сторона который разнообразный кнопка слот для подача дать а на другой — выходной слот который возвращать информация взять к пример стек представить коробка на один сторона который есть один слот для вставка дать и кнопка push рядышком на обратный сторона — кнопка pop вы подавать туда записка с число 8 и давить кнопка push затем подавать ещё бумажка и два раз давить push и так n раз а затем жать pop из ящик вылетать бумажка с число 76 или другой в общий то который вы подать нужно ещё число два раз давить pop и так до морковкин заговенье тот пора пока ящик не опустеть а если вы продолжить давить pop механизм из ящик завыть стек пустой именно так и выглядеть объект но после тот как вы создать и настроить класс вы уже фиолетовый как он там работать — он просто правильно работать а больший и желать не нужно а инкапсулировать весь этот структура вы не держать весь подряд в память они множество ящик просто общаться между себя так как вы настроить инкапсуляция — своеобразный костыль поддерживать сотня столп ваш программа в то время пока вы конструировать сто один в крупный проект а именно для они создание и придумать ооп без это увы никак хотя вряд ли это «ува здесь вообще уместно 5 в реальный мир нет иерархия отношение повсюду лишь иерархия включение да разве но ведь никто не мешать создать например иерархия где весь река мир конго сена темза амазонка колыма и тд являться объект один всеобъемлющий «река который присущий свойство например состоять из вода и действие например течь а уже она быть наследоваться от «водоём который тоже состоять из вода а от «водоём можно унаследовать ещё и «озеро объект который быть отдельный озеро байкал каспийский мор титикака и тд схема довольно грубый но иерархия отношение — это тоже абстракция что-то а-ля платоновский идея если хотеть в реальный мир они нет они существовать только в ум это обобщение и не более тот но ведь именно так человек очень часто мыслить мы ведь мочь сказать «носка без уточнение каков у он цвета из какой материал соткать и тд но существовать ли этот «носка в действительность и весь же мы не должный смущать что нет ни «объект ни «носка 6 методология ооп изначально ошибочный абсолютно необоснованный аргумент ооп создаваться для тот чтобы моделировать своеобразный виртуальный мир состоять из объект как и наш мир например человек — объект из реальный мир он мочь ходить бегать кушать срать спать играть в футбол смотреть футбол но к сожаление я тут не мочь весь перечислить да и честно сказать весь перечислять быть бы противно этот же самый человек обладать свойство наличие/отсутствие волос цвета волос если они есть цвета глаз если они есть цвета кожа количество палец на рука и тд если правильно сконструировать весь поль и метод как я уже писать выше то программный объект смочь моделировать тот или иной свойство реальный объект человек очень даже хорошо мыслить в такой категория — именно поэтому ооп и стать распространить оно очень помогать при написание больший проект так как привносить модульность и позволять разбивать программный пакет на отдельный компонента взаимодействовать друг с друг 7 но даже миллион муха не убедить мы что навоз — это вкусно самый популярный аргумент против ооп мол масса в большинство свой глупый весь же я не думать что это относиться и к программист бегать по «модный шмотки и восхищаться они но задуматься а если бы на пьедестал взойти не ооп а скажем лп думать быть бы весь по-другому ничто подобный найтись бы и фанат и злостный противник а на ооп смотреть бы как на инструмент к это я вообще-то и призывать а не как на таблетка сотворить сам бог и потому незаменимый почему этот статья — в защита ооп весь современный разговор про парадигма программирование как я видеться сводиться к два диаметральный посылка оставить ооп и выкинуть весь остальной или же выкинуть ооп и… ну вы понять я я не хотеть чтобы вполне годный парадигма посчитать достойный свалка но я и не хотеть чтобы вокруг она водить хоровод а весь остальной забыть я думать что два сделать простой а против первое и направить этот статья если вы не нравиться ооп кома — ооп кома — фп кома — пп а кто-нибудь мочь быть вообще более всего мила свиной хрящик если вы не любить кошка — наверное вы просто не уметь они готовить 