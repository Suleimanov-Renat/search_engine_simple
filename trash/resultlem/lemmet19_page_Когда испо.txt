когда использовать ооп а когда — фп грубо говорить у фп и ооп схожий возможность в выражение сложный конструкция и инкапсуляция программа на мелкий кусок который можно комбинировать между себя самый большой разница между два этот «философия состоять в тот как дать соотноситься с операция над дать основной доктрина ооп являться то что дать и операция над они сильно связать объект содержимый дать и реализация операция над дать он скрывать весь это от другой объект через интерфейс – набор метод или сообщение на который он реагировать такой образ центральный модель абстракция являться сам дать спрятать за небольшой api в вид интерфейс при ооп подход программист составлять новое объект и расширять существующий путём добавление к он метод основной доктрина фп являться то что дать слабо связать с функция над один и тем же набор дать можно совершать разный действие а центральный модель абстракция являться функция а не структура дать функция прятать они реализация а абстракция язык общаться с функция при фп подход программист писать новое функция в поединок между медведь и крокодил решающий фактор выступать местность так когда же один предпочтительный другой поскольку блог посвятить практический реализация я отметать теоретический построение вроде возможность механически рассуждать о код и думать про всякий прагматичный вещий писать бизнес-код в такой ситуация когда нужно сделать слишком много всего при недостаток ресурс и время мочь ли один из два модель победить в бизнес окружение подумать хорошенько пока я заварить себя чашечка эспрессо… конечно в бизнес-программирование доминировать функциональный модель сюрприз сюрприз если вы рассматривать только такой язык как java c++ c# и ruby если подумать то весь это ооп – тонкий прослойка для доступ к база дать и sql что на самый дело – функциональный язык хотя и возможно управлять база дать через встроить процедура pl/sql это создавать узкий место и обычно не стоить тот главный преимущество реляционный база дать – возможность работа с требование который возникнуть в будущее когда вы нужный новое отчёт вы просто они писать разный приложение мочь одинаково обращаться к база ограничение можно накладывать программно чтобы они работать в весь приложение отойти назад вы увидеть что база дать – это большой структура дать а приложение – набор операция с они в сердце любой бизнес-приложение лежать большой функциональный база дать и тем не менее мы хвататься за объект в приложение простой следование мода или есть некий фундаментальный разница между тем что мы нужно сделать в приложение и тем что мы нужно сделать при работа с база дать ответ в тот что просто сделать через ооп а что просто сделать в база дать хороший ооп-архитектура позволять легко менять то как вещий связать друг с друг инкапсуляция позволять легко менять взаимодействие часть правда в ооп не очень легко добавлять новое действие но если у вы есть бизнес-процесс размещение заказ который рефакторить на предмет поддержка новый бизнес-правило – тут ооп вставать в весь краса тот часть код который не нужно знать о происходить изменение изолировать от тот кома знать о они надо с другой сторона хорошо разработать база дать делать простой добавление новый запрос и операция возможно смотреть на дать с другой точка зрение или добавлять новое обновление дать клиентский приложение изолировать от такой вещий как индексация и быстродействие менять связь сложно если вы менять структура управление и переходить от один менеджер на отчёт к система «многий к многий это сломать много приложение поэтому если мы записать весь что должный быть в бизнес-приложение на карточка тот что представлять длительный и редко изменяться отношение идти в база дать а тот что представлять эволюционировать и изменяться операция идти в приложение набор «карточка элемент приложение обычно раз в четыре выше набор элемент база дать весь меняться бизнес должный учиться растить и развиваться так что насчёт фп – код написать в функциональный стиль что насчёт простой организация ооп-программа в вид набор операция действующий над относительно неизменный набор дать допустимый и то и другой однако всегда нужно задумываться над приоритет – над продолжительность связь если что-то вряд ли поменяться при это над это быть работать разный меняться вещий – он хороший оформлять в фп-стиль если что-то меняться часто это хороший оформить в вид ооп если у каждый менеджер мочь быть несколько отчёт а у каждый отчёт – только один менеджер такой операция вряд ли стоить прятать за api где объект manager скрытый образ делегировать операция такой вещь простой создать в вид дать над который производиться операция но правило насчёт стоимость доставка скорее всего поменяться и он надо инкапсулировать посильный чтобы изолировать от он остальной часть программа хороший программа писаться с помощь оба стиль потому что хороший программа должный выполнять несколько разный задача 