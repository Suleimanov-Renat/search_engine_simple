почему ооп не инкапсуляция наследование и полиморфизм или как я научиться не волноваться и полюбить разметка весь привет дама и господин в статья речь пойти от тот как у я жутко пригорать от объектный ориентировать программирование и проектирование скорее всего подобный дохер и трошка и вполне возможно что я нагло кто-то копировать я честно говорить не очень много гуглила но минимально пытаться добро пожаловать в коммент с пожелание предложение и сракать нотация и терминология если слово инкапсуляция наследование полиморфизм и тд выделить жирный шрифт то автор иметь в вид инструмент разработчик если инкапсуляция наследование полиморфизм и тд выделить италик то это уже глубокий философия если какой-то предмет подчеркнуть линия значит он нужно рассмотреть с точка зрение концепция объектный ориентировать программирование как объект если в текст вы заметить вот это вот весь такой то перед вы интерфейс если какой-то действие подчеркнуть такой линия и выделить италик значит это действие который производить объектсвязь можно увидеть через синтаксический конструкция если какой-то текст выделить следующий образ значит это паттерн проектирование краткий введение на мой взгляд главный проблема ооп в тот что он понимать не с тот сторона к сожаление в xxi век каждый день возрастать гребаный тенденция к воitь и информационный пространство просто наполняться однотипный история как вчера он на токарный станок вытачивать железка а сегодня я успешный 23-летний сеньор с птушной образование на свой галера клепать убогий сайтик на битрикс получать золотой гора такой не объяснять что такой ооп имя объяснять что такой инкапсуляция наследование и полиморфизм и то если повезти а что за зверь такой ооп — ну и хер с он собственно регулярно видеть в вакансия требование к понимание принцип ооп при это работодатель сам не особо понимать что такой ооп ни раз на собеседование вообще я не спросить что такой ооп если дело доходить до он но спросить про инкапсуляция наследование и полиморфизм атрибут доступ как это работать с наследование и прочий технический деталь целевой технология весь бы ничто но вакансия достаточно серьёзный требовать глубокий понимание программирование и алгоритмизация а не вот это вот весь это ремаркарегулярно на "соискательный сессиях" провозить такой каждый раз когда заканчиваться контракт как минимум чтобы прощупать тенденция рынок труд проходить n-ий количество собеседование стоить отметить что проблема с это возникать где-то в 70% случай в остальной реально давать решать какой-нибудь алгоритмический задача в основное это на какой-нибудь банальный методика в стиль жадный алгоритм простой комбинаторика или в плохой случай динамический программирование я отучиться в один из хороший факультет мой страна и там курс по ооп заключаться в тот как он использовать в рамка платформа net инкапсуляция наследование полиморфизм но ни капля настоящий ооп это кстати один из серьёзнейший проблема современный it образование между прочить до сей пора ребята с который я учиться на поток не вдуплять как он применять этот ооп а потом у ты в кодяр тонна бесполезный фабрика и какой-то жуткий зависимость я сам проводить собеседование и спрашивать у человек то как они понимать ооп я рассказывать про класс объект интерфейс атрибут доступ инкапсуляция наследование полиморфизм и тд при это не часто кто-то мочь чётко ответить на то в что главный идея и профит от ооп просто собраться куча дурачок и придумать три сложный слово на который сейчас весь дрюкаюта как на икона собственно ооп для начало разобраться в тот что я собственно иметь в вид весь мир мыслить объект вы сидеть на стул стол пить кофе из чашка вы существовать в мир объект жить среди они вы и сам объект в один очередь концепция объектный ориентировать программирование — это один попытка человек изобразить программа в тот вид в который человек видеть и понимать окружающий мир если мыслить чуть глубокий то это попытка научить комплюхтер думать как человек из это следовать приятный свойство ооп — оно реально понятно человек познакомиться на небольшой пример предположим мы хотеть получать чашка самый разнообразный с точка зрение мой мама который не программист мы хотеть построить завод который быть по заказ производить разнообразный чашка кружка и бокал с точка зрение я как программист мы хотеть построить завод который быть по заказ производить разнообразный чашка кружка и бокал в свой базис у чашка кружка и бокал лежать идея какой-то абстрактный сосуд метод использование который — из он пить а свойство который — он мочь содержимый внутри жидкость и сделать из какой-то материал комментарий к пример и технический деталивидеть как мы ловко на простейшее пример уже получать самый базовый понятие ооп для это мы абстрагироваться от определённый деталь реализация каждый предмет и получить набор общий свойство и всего такой там сам по себя этот факт очень важный он говорить мы о тот что объектный ориентировать программирование — это просто люба человек который прочесть этот текст смочь понять что у мы есть какой-то сосуд который мы из чего-то сделать набрать в он вода и пить в технический термин у мы быть абстрактный класс например как в код внизу выбрать php как язык с понятный объектный синтаксис и чтобы показать что полиморфизм — это не возможность создать сто метод в который можно передавать разный параметр с# не выбрать из-за точка а java лагаета abstract class vessel { private $material private $liquid public function constructmaterial $material { $this->material = material } public function fillliquid $liquid { $this->liquid = $liquid } public function pour { $liquid = $this->liquid $this->liquid = null return $liquid } } class cup extends vessel { //ч-то он отличаться } class wineglass extends vessel { //ч-то он отличаться } class mug extends vessel { //ч-то он отличаться } class human { // тут что-то происходить public function drinkvessel $vessel { $this->stomack->add$vessel->pour } } далёкий — большой для тот чтобы начать производить кружка мы нужный завод мы делать заказ завод и он производить кружка чашка или бокал из тот материал который мы нужный например из стекло в программирование весь как в жизнь кодяраclass vesselfactory { //н самый изящный код зато наглядненький $classname - это имя класс который мы нужно получить от фабрика $material - из что сделать public function getvessel$classname $material { return $classname$material } } чтобы программист мочь пить из кружка чашка или бокал он нужный ручка чтобы пират мочь пить из ручка он нужный дырка для крюк не важный как это сделать завод важный чтобы программист мочь взять сосуд рука а пират — крюк в идеал ручка должный быть полиморфный чтобы и программист и пират мочь взять кружка а не взять рука за ручка или взять крюк через дырка для крюк комментарий к пример и технический деталиинтерфейс требовать у объект наличие поведение для внешний взаимодействие интерфейс не обзятальный толжена быть able например если наш компьютер имплементит интерфейс usb то этот интерфейс не быть usbabelюэсбибэбла это быть usb интерфейс interface knob { public function takeholder $with } class cup extends vessel implements knob { public function takeholder $with { //как-то мы мочь держать стакан держатель } } этот пример не очень аккуратный и продумать зато полностью передавать то как из концепция ооп вытекать весь то что так требовать на собеседование именно это понимание и позволять следовать solid принцип создавать красивый архитектура и отделять бизнес-логика от контроллер по суть в понимание этот простейшее вещий лежать весь быть современный разработка и даже несмотря на то что это просто как валенок весь равно 60-70% разработчик не мочь прийти к это и причина в тот что разработчик не предлагать понимание процесс он предлагать инструмент рассуждение весь знать что один стороной молоток мы забивать гвоздь другой вытягивать мой батя острый сторона молоток использовать как клин а ручка как рычаготь как лом потому что мой батя — инженер-конструктор робот в промышленность он понимать принцип по который работать молотокклин + рычаг и использовать он не только как молоток поэтому мы надо понимать принцип ооп чтобы применять они наиболее успешно мой опыт работа в один команда с ребята из uk usa и eu показывать этот большой недостаток архитектор и сеньор весь порода и масть обладать невероятный технологический познание с труд делать хороший архитектурум говорить про усреднить случай есть множество гениальный ребята который такой красота делать что приходиться дом под одеяло смотреть на они uml просто потому что следовать гайдлайна напрямую обозначить в ооп но в жертва технический деталь приносить куда более важный философский деталь например неправильно сделать объектный декомпозиция система превратить жизнь ваш разработчик в ада даже если она сделать по весь гайдлайна и согласно весь хороший практика обычно в это случай получаться крутой класс с интерфейс фабрика однако в они много например спагетти код просто потому класс либо слишком малоприходиться они поведение превращать в условный логика или слишком многой приходиться в условный логика хендлить разный вид класс а там и экстендабилить страдать и склонность к алкоголизм расти хороший практика — это представить система так будто вы не программист а строитель почему паттерн проектирование так хороший потому что они как раз таки позволять абстрагироваться от технический реализация и создавать структура у себя в голов такой какой мы бы они делать не в код а использовать гвоздь молоток и доска многие мой коллега жаловаться что не понять банда четыре потому что там пример код на c++ или smalltalk там идея совсем не в код на он вообще можно хер забить там идея в тот что мы с вы мочь строить программа так же как и дом и автомобиль понятный для человек образ копировать инженерый гений из абсолютно другой сфера программист смочь думать как инженер только тогда когда начать видеть матрица вокруг декомпозировать предмет который он окружать называть методы/интерфейсы/свойство всего что попадаться на глаз начинать от наш любимый кружка и заканчивать любимый пират дрова в огонь подбрасывать то что в современный мир миллион язык который либо предоставлять мы кастрировать ооппривет javascript go либо технически ориентированныйc# java c++ либо прекрасный и при это пугать свой возможностямиpython ruby либо вообще php и это не камень в огород этот язык потому что у они есть назначение применение и они хороший и пусть такой и быть мой любимый языкиpython c# и php просто потому что ещё я очень полюбить брейнфак как язык с абсолютно нестандартный подход отлично подходить на собес давать за 30 минута написать прожок на брейнфак и тут сразу видно насколько хорошо разработчик знак с стандартный структура дать насколько у он развитый логика и самый важный — насколько разработчик уметь учиться заключение вообще в что мораль мораль для разработчик что нужно думать как инженер чтобы стать программист мораль для работодатель — нужно чтобы ваш программист думать как инженер современный литература и образование предлагать вы инструмент и это действительно круто вы покупать книга и получать огромный тулбокс для разработка но в один очередь вы нужно понимать принцип работа каждый инструмент для тот чтобы наиболее эффективно и правильно использовать он ооп — это не инкапсуляция наследование и полиморфизм они лишь вытекать из идея но понимание идея важный чем использование инструмент построить на идея понятный дело должный быть человек который молоток только забивать гвоздь и они заслуживать заработный плата место и уважение весь ремесленник заслуживать уважение за ремесло но перед тем как собрать стул кто-то должный придумать какой стул мы быть собирать я думать многие ребята и девчата получить приятный толчок в свой задница квалификация когда осознавать это различие уважаемый читатель если у вы есть идея и предложение по дать топика — быть бы очень круто если вы поделиться это с мы 