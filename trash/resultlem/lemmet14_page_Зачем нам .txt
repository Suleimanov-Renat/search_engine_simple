зачем мы ооп и что это такой весь привет неделя стать на хабра посвятить ооп последний статья вызвать у я куча эмоция и к сожаление очень плохой эмоция я очень не понравиться статья почему потому что в она передаваться какой-то отрицательный эмоция о использование ооп эмоция вызвать лишь тем что человек не до конец понимать весь сила ооп и хотеть убедить весь в тот что ооп зло самый печальный что человек начинать прислушиваться и кидаться ужасный довод не иметь ничто общий с действительность я думать что студент такой статья противопоказанный большой чем gof который я бы давать как можно ранний  начать что такой ооп ооп — это и оо программирование и проектирование один без другой бессмысленно чуть более чем полностью создать ооп для проектирования/программирование программный продукт не для моделирование процесс не для проектирование протокол а именно для программный продукт для они реализация для упрощение система который быть реализовывать протокол или бизнес-процесс или что-то ещё когда вы начинать использовать ооп первое что вы должный сделать — это начать использовать объектный мышление я уже когда-то говорить что это самый большой проблема ооп научиться мыслить объектный очень сложно и очень важный учиться это делать как можно ранний gof с аналогия тип мост конструктор фасад очень в это помочь использовать объектный мышление вы легко смочь проектировать сложный системыиспользовать объектный мышление вы легко мочь решить любой задача очень важный что любой задача проектирования/программирование если она в принцип можно решитьабсолютно любой оперировать объект и взаимодействие между они тот ооп без объектный мышление не позволить вы начать использовать весь сила и мощь ооп пойти далёкий итак мы важный мыслить объектный для тот что бы найти нужный мы абстракция объект для решение наш задача если аналогия и абстракция выбрать удачно то мы видеть очень чёткий картина который позволять мы быстро разобраться в тот что же происходить в система и вот тут мы начинать вспоминать про наследование и полиморфизм этот два инструмент нужный для удобный масштабирование система без дублирование код но сила этот механизм зависеть от тот насколько удачный абстракция и аналогия вы выбрать если ваш объектный мышление не позволять вы сформировать удобный декомпозиция объект то наследование и полиморфизм вы не помочь тот наследование и полиморфизм это ничто иной как инструмент который позволять решить проблема масштабирование система как же этот инструмент работать да простой пареный репа потому что это весь основать на привычный мы вещь любить простой пример из жизнь 1 наследование есть пекарь есть печь электрический и газовый ваш задача смоделировать процесс приготовление пища пекарь в каждый из печь решать задача в лоб у мы быть много дублирование код из-за тот что сам процесс передача пища в печь и сам работа с печь идентичный для оба печь но если мы включать объектный мышление и вспоминать про инструмент наследование то получать примерно следующий диаграмма лень рисовать сорри есть печь абстрактный печь у нея есть поведение — включить выключить увеличить или уменьшить температура положить чего-то достать чего-то и состояние — температура в печь включить или выключить это отличный пример абстрактный объект в который соблюсти принцип инкапсуляция при реализация я они обязательно быть соблюдать и есть пекарь конкретный такой пекарь иван он уметь работать с абстрактный печь тот смотреть температура включать выключать и тд вы понять сила наследование в тот что мы не прийтись переписывать наш иван для каждый из печь быть то электро или газовый печь я думать весь ясно почему получаться что инструмент применить правильно 2 полиморфизм печь ведь по-разному работать газовый потреблять газ электро печь — электричество использовать полиморфизм мы легко менять поведение в наследник абстрактный печь 3 инкапсуляция основный фишка инкапсуляция в тот что я не должный знать что происходить внутри мой печь допустить я вызывать не метод включить печь а менять она свойство включить на значение true что произойти в этот момент если принцип инкапсуляция не соблюсти то я быть вынужденный печь сказать начинать потреблять горючий тк я ты включить тот пекарь знать что печь потреблять горючий знать как печь работать или например мы не мочь установить температура печь ниже или выше определённый уровень если не соблюдать принцип инкапсуляция то мы должный быть говорить печь проверить-ка текущий температура пойти тот такой тот пекарь опять слишком много знать о печь геттер и сеттер это средство язык который помочь мы легко реализовать отслеживание изменение состояние весь если геттер и сеттер пустой значит так надо на мыть уровень абстракция геттер и сеттер — не мочь мешать реализация инкапсуляция кривой реализовать инкапсуляция мочь проектировщик/программист в дать пример уровень абстракция выбрать хорошо весь заниматься свой дело весь три кит ооп работать в слава но стоить я выбрать плохой абстракция как начинаться сущий кошмар и даже есть стандарт чеклист который помочь понять хорошо ли вы выбрать абстракция и верный ли ваш декомпозиция в тот ли направление вы идти solid ещё стать добавлять абстракция как ещё один столп ооп я думать что это скорее верно но уж очень попахивать кэп высказывание про типизация я тоже зацепить дело в тот что никакой проблема в тот с кто вы сейчас работать из наследник нет если на текущий уровень абстракция вы важный именно использовать печь то вы не важный какой она вы получать печь вы решать свой задача то то и оно… почему вы считать что это динамический типизация я не понятно вы хотеть печь брать вы нужный электрический ну извинить газовый вы уже не подойти остальной пример который быть привести в зацепить я статья лишь пример отвратительный выбрать абстракция и аналогия в рамка поставить задача точка отдельно про dto dto — это паттерн он позволять создать объект который передать информация другой слоить другой система короче куда-то чего-то передать почему он не мочь быть рассмотреть я как объект для я вообще загадка где противоречие то являться контейнер только ну и что это же объект в рамка рассмотреть я объектный модель на задать уровень абстракция где dto — объект и часть декомпозиция про язык тоже непонятно что говорить я мочь проектировать по использовать объектный подход независимо от язык но если язык не реализовать основной инструмент для работа с объект то я быть очень сложно или невозможно реализовать спроектировать я система ещё говорят что некоторый вещий нельзя представить в вид объект и они взаимодействие я уверенный что это не так просто необходимый выбрать уровень абстракция верно быть то реализация протокол слой доступ к бд подключение плагин менеджер задача бизнес процесс система проектирование бизнес процесс тот весь что угодный можно представить как объект и они взаимодействие весь можно реализовать как объект и взаимодействие между они хорошо это или плохо чаща всего зависеть лишь от ваш умение мыслить объектный резюмировать если вы не понимать сила ооп то скорее всего вы надо развивать объектный мышление ps в коммент к прошлый статья я явно много перегибать палка при обращение к некоторые человек приносить свой извинение 