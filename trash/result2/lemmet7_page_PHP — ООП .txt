php — ооп или процедурный подход php один из самый популярный скриптовый язык программирование почти 60% веб сервер использовать phpмиллион веб-сайт и веб-приложение разрабатываться на php каждый месяц php изначально разрабатываться как простой замена язык perl и уже спустя пара год он стать чрезвычайно мощный и популярный язык php сам по себя очень похожий на ansi c один из причина почему php стать такой популярный это он короткий период обучение изучение php абсолютно не тяжёлый занятие особенно если вы хорошо знакомый с синтаксис java или c так как писать php скрипт достаточно просто люба мочь написать php код без соблюдение какой-либо соглашение и смешивать уровень представление с бизнес логика (этый один из основный причина существование большой количество неуправляемый проектов) потому что в php не обязательно строгий соответствие соглашение написание код с годами когда проект становиться весь большой и большой он превращаться в громадный неуправляемый приложение ооп или объе́ктно-ориенти́ровать программи́рование хорошо применяться в практика программирование для более лёгкое создание управляемый проект процедурный подход подразумевать написание программный код без использование объект процедурный программирование заключаться в написание код с или без подпрограмма ооп обучать люба язык программирование более хороший программный код и использоваться для получение более высокий производительность и написание больший проект не бояться запутаться в они управление ооп давать вы возможность создавать объект который можно быть использовать многократно для тот что бы вы или другой разработчик мочь использовать они в свой проект не переделывать они снова и снова ооп убирать барьер и сложность в написание и управление больший приложение php позволять мы писать приложение 2мя разный способ один — процедурный а два объектный ориентировать если вы до сей пора не понять разница между этот два подход давать посмотреть на этот кусок код — один и тот же пример написать разный подход процедурный: $user_input = $_post[‘field‘]; $filtered_content = filter($user_input); //user input filtering mysql_connect(«dbhost»«dbuser»«dbpassword»); //database mysql_select_db(«dbname»); $sql = «some query»; $result = mysql_query($sql); while ($data = mysql_fetch_assoc()) { process ($data); } process_user_input($filtered_content); а вот тот же кусок код с использование ооп: $input_filter = new filter(); $input_filter->filter_user_input(); //filter the user inputs $db = new dal(«mysql»); //data access layer $db->connect($dbconfig);//we wre using mysql $result = $db->execute($sql); reportgenerator::makereport($result); //process data $model = new postmodel($filter->get_filtered_content()); $model->insert(); если внимательно посмотреть на этот 2 кусок код то можно заметить что код с использование ооп более читабельный и лёгкий для восприятие код с ооп организовать хороший потому что в он понятно какой объект чем обрабатываться большой приложение написать на процедурный подход становиться практически не возможно воспринимать уже после выход несколько версия конечно вы мочь следовать жёсткий правило написание программный код но они утвердить миллион разработчик который знать что это не дать вы в конечный итог управляемость и юзабилить проект если вы не использовать в свой программа ооп почти весь большой приложение написать с использование объектный ориентировать подход исходить из изложить выше можно вынести преимущество использование ооп: ооп быть создать что бы облегчить жизнь разработчик использовать ооп вы мочь разбить ваш большой проблема на маленькая проблема который решать гораздо простой основный требование ооп: весь что вы хотеть сделать — делать объект объект это отдельный маленький часть код который мочь объединять дать и свойство вместе в приложение весь объект взаимодействовать друг с друг ооп мочь быть рассмотреть хороший с разный сторона особенно когда вы важный время разработка и последующий развитие приложение основной преимущество использование ооп можно выразить как: * повторный использование: объект это логический объект у который есть комплект свойство и метод и он мочь взаимодействовать с другой объект объект мочь быть абсолютно независимый или мочь зависеть от другой объект объект обычно создавать для решение специфический поставить проблема следовательно когда другой разработчик сталкиваться с похожий проблема они мочь подключить ваш класс к свой проект и использовать он не бояться что он нарушить процесс они разработка это позволять избежать dry что расшифровываться как don’t repeat yourself ( не повторяйся) в процедурный или модульный программирование повторный использование возможно только в совокупность * рефакторинг: когда вы необходимый в проект использовать рефакторинг ооп предоставлять вы максимум преимущество так как весь объект это маленькая элемент и содержимый свой свойство и метод как часть себя по это использовать рефакторинг относительно легко * расширяемость: если вы необходимый расширять функциональность ваш проект вы мочь достигнуть хороший результат при помощь ооп один из основный функциональность ооп это расширяемость вы мочь использовать рефакторинг объект что бы добавить функциональность работать над это вы по прежний мочь сохранить прежний совместимость объект — следовательно вы мочь прекрасно работать и с прежний код или же вы мочь расширить объект и создать абсолютно новый который быть содержимый весь необходимый свойство и метод родительский объект от который происходить новый а потом уже добавить в он новое функция это называться “наследование” и это очень важный возможность ооп * поддержка: объектно-ориентированный код лёгкий поддерживать так как он следовать весьма жёсткий соглашение написание код и писаться в самопоясняться форма к пример когда разработчик дополнять перерабатывать код или отлаживать он он мочь легко найти внутренний структура код и поддерживать код время от время более тот когда в ваш окружение работать команда разработчик ооп мочь быть хороший решение так как вы мочь распределять ваш код между член команда после разбитие он на маленькая часть этот маленькая часть мочь быть разработать как отдельный объект следовательно разработчик мочь работать практически независимо друг от друг в конечный итог объеденить весь часть в один приложение не составить большой труд * эффективность: идея ооп в действительность быть разработать для повышение эффективность и облегчение процесс разработка несколько шаблон проектирование разработать что бы создавать более эффективный и хороший код более тот в ооп вы мочь вы мочь размышлять над ваш решение в более удобный форма чем в процедурный подход поскольку вы разбивать ваш проблема на несколько маленькая проблема и вы находить решение для каждый из они отдельно большой проблема решаться сам по себя авторский перевод из книга object oriented programming with php5 ps мой один хабратопика если понравиться быть переводить книга далёкий как по я довольно интересный и содержательный 