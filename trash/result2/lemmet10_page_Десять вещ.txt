десять вещий который я терпеть не мочь в ооп бог временами я просто ненавидеть объектно-ориентированный программирование наверное я не один такой бессмертный слово эдсгера дейкстра гласят: «объектно-ориентровать программирование — это исключительно плохой идея который мочь придумать только в калифорнии” обычно я не жаловаться но сейчас думать самый время оглянуться назад и посмотреть что же не так с ооп в такой дух я и подготовить скромный список десять вещий который я терпеть не мочь в ооп 1 парадигма что же есть парадигма объектно-ориентированный программирования? есть ли на это прямая ответ? я слышать столько разный версия что и сам теперь не знать если мы посмотреть на идея smalltalk’ мы столкнуться с мантрой: “всё есть объект” кроме переменный и пакет и примитив число и класс тоже не совсем объект и так далее очевидно “всё есть объект” не мочь быть основа парадигма что для ооп являться фундаментальным? питер вегнер однажды предположить что основа объектно-ориентированный программирование являться объект класс и наследование однако каждый язык программирование поддерживать они по-разному или даже не поддерживать по умолчание некоторый из они ясно что это тоже не парадигма ооп другой заверять что ооп — это инкапсуляция абстракция и сокрытие дать правда разный источник сказать вы что это всего лишь разный слово для описание одинаковый идея а другой сказать что это три фундаментально разный концепция с середина 80-ый о ооп гулять несколько миф один из они миф о повторный использование гласить что ооп делать разработка продуктивный потому позволять наследовать и расширять текущий код вместо тот чтобы всякий раз писать он заново другой миф о проектирование который подразумевать что анализ проектирование и реализация плавно следовать друг из друг потому что весь они — быть объект конечно же ни один из этот миф не мочь быть парадигма ооп давать взглянуть на другой парадигма позволять решать программистский задача определённый образ процедурный программирование часто описываться как программа = дать + алгоритм логический программирование гласит: программа = факт + правило функциональный программирование по весь видимость программа = функция + функция что наводить на мысль что ооп означать программа = объект + сообщение так ли это? я думать что тут теряться главный а главный в тот что ооп – это не парадигма как например процедурный логический или функциональный программирование вместо это ооп говорит: “длить каждый отдельный задача вы должный разработать свой собственный парадигму” другой слово парадигма объектно-ориентированный проектирование такова: “программирование — это моделирование” 2 объектно-ориентированный язык программирование ещё я не любить то как весь нравиться не любить чужое язык мы любим разделять мир на лагери: фигурный скобочка против квадратный против круглый вот некоторый вещий который говориться о наш любимый оояп: “си позволять легко выстрелить себя в ногу; с c++ это сделать сложный но когда вы это делать вы отстреливать себя нога целиком”этый сказать бьерна страуструп так что весь хорошо “я придумать термин ‘объектно-ориентированный’ и вот что я вы скажу: я не иметь в вид c++” — алан кей “в c++ всего 2 вещий получиться не так: начальный замысел и реализация” — бертран мейер “внутри с++ сидеть более компактный и понятный язык отчаянно пытаться выбраться наружу” — бьерна страуструп “c++ — это история повторяться как трагедия java — это история повторяться как фарс” — скотт маккей “java хороший аргумент за smalltalk после c++” — фрэнк винклер “ести бы у java быть настоящий сборщик мусор большинство программа удалять бы себя в время исполнения” — роберт сьюэла и возможно наиболее всеобъемлющий приговор: “быть всего 2 тип языков: тот на который весь жаловаться и тот который никто не пользуется” — бьерна страуструп 3 класс класс сводить я с ум это мочь показаться странный так что позволить объяснить кажется что класс — это удобно наш мозг превосходно классифицировать информация который мы получать из окружающий мир и быть бы вполне естественно классифицировать весь в объектно-ориентированный программа однако в реальный мир есть только объект класс существовать только в наш сознание мочь ли вы привести хоть один пример из реальный мир что класс — это реальный физический сущность? нет не думать и вот в чем проблема вы когда-нибудь задумываться почему программа на объектно-ориентированный язык понять настолько сложный чем на процедурном? в процедурный программа процедура вызывать другой процедура процедурный код показывает… процедура вызывающий другой процедура весь хорошо и просто так ведь? в объектно-ориентированный программа объект посылать сообщение другой объект объектно-ориентированный код показывает… класс наследовать другой класс ой кажется что в ооп между исходный код и исполняемый программа нет никакой связь наш инструмент плохо помогать нам: ide ведь показывать класс а не объект я думать поэтому smalltalk’ер так любить программировать в дебаггере: последний давать имя почуствовать контроль над исполняемый объект и позволять программировать они напрямую вот что я бы хотеть сказать разработчик инструментов: пожалуйста дать мы ide который быть показывать объект вместо классов! 4 метод честно говорить метод я тоже терпеть не мочь как мы весь понимать метод в хороший объектно-ориентированный программа должный быть короткий и изящный множество маленькая метод удобный для разработка понимание повторный использование и так далее так в чем же проблема? принять в внимание то что на чтение объектно-ориентированный код мы тратить большой время чем на он написание это и называться производительность: вместо тот чтобы часами писать большой количество код чтобы добавить новый функционал мы писать всего лишь несколько строчка но при это часами пытаться понять какой именно строчка нужно написать! один из причина почему мы тратить столько время в тот что мы приходиться листать код туда-сюда… через множество маленькая метод это также известно как синдром затерянный в космос и о это говориться с время создание ооп цитировать адель голдберг “в smalltalk весь происходить где-то еще” я уверенный что винить в это стоить сегодняшний кодоориентировать ide — учитывать что объектно-ориентированный код не давать представление о исполняемый приложение ide вставать на наш путь вместо то чтобы помогать другой причина по который smalltalk’ер так любить программировать в дебаггера — он помогать имя хорошо видеть какой объект с какой взаимодействовать поэтому я думать сегодня популярный разработка через тестирование (test-driven development tdd) позволять увидеть взаимодействие объект в время разработка и дело не в самый ооп — мы просто ещё не понять (после более чем 40 лет) как надо разрабатывать программа для он мы должный задаться вопросом: почему исходный код оставаться преобладать отображение в ide? я хотеть ide который позволить я переключаться между код и исполняемый приложение (длить получение представление о этот идея заглянуть на сайт платформа для веб-разработка seaside позволять переключаться прямо с исполняемый приложение на редактировать исходный код) 5 тип ладный признаю: я нетерпеливый и ненавидеть повторять слово дважды тип же заставлять я это делать кто-то сейчас наверняка подумал: “но как же ты мочь писать на бестиповой язык ты никогда не быть уверенный что твой код правилен” конечно “бестиповых” язык не существовать — существовать статически и динамически типизировать статически типизировать мешать писать код в некоторый случай в принцип ничто плохой в это нет проблема с сам тип какой мы они знать во-первых они давать приводить к чувство ложный безопасность то что ваш java программа компилироваться не означать что в она нет ошибка (и даже ошибка с типами) во-вторых и век-главное типизация предполагать что мир постоянный а программа в немой состоять из неизменный часть а это не так из-за это некоторый полезный тип программа (особенно рефлексивные) становиться сложный писать и наконец типизация плохо ладить с тем факт что существовать разный понятие тип не бывать один всемогущий система вспомнить тот страдание который мы испытывать с обобщение в java сейчас разрабатываться много полезный система тип но расширить java чтобы уместить они весь мы не мочь гилада брах предложить сделать типизация не только необязательный чтобы запускать программа даже в тот случай если типизация некорректный но и подключать такой чтобы мы смочь подключать разный система тип в разный часть наш программа мы должный подумать над это предложение а заодно и над тем как адаптировать язык программирование и среда разработка к разнообразный система тип 6 изменчивость “перемена неизбежный — в отличие от мелочь из торговый автомата” — роберт галагер мы весь не любим меняться правда? а если так то почему же жаловаться если вещий не становиться лучше? мы знать что полезный программа должный меняться или с время они ухудшаться (междать прочить знаете в чем разница между железо и софтом? железо ухудшаться если вы не поддерживать он в рабочий состоянии) учитывать что реальный программа должный меняться справедливо полагать что язык и ide должный поддерживать это предлагать вы однако назвать хоть один механизм в язык программирование который поддерживать изменчивость тот механизм который работать с изменчивость скорее ограничивать и контролировать она наш мир непостоянный но мы хорошо себя в немой чувствовать контекст — вот то что позволять мы справляться с перемена мы подстраивать наш поведение наш ожидание под контекст в который находиться но наш программа почему-то ломаться если контекст меняться я хотеть увидеть этот идея в объектно-ориентированный язык и ide как исходный код так и исполняемый приложение должный иметь возможность подстраиваться под изменяться контекст уверенный что многие шаблон проектирование и идея (такий как посетитель и внедрение зависимости) — всего лишь костыль который исчезнуть после реализация механизм контекст в оояп 7 шаблон проектирование паттерн не мочь с они не мочь без они каждый шаблон проектирование делать ваш проект запутанный я весь сказать 8 методология “всё методология основать на страхе” — кент бэк похоже некоторый из мой студент работать по agile-методология в стиль чак норриса: “чак норрис не заниматься итеративный разработка весь получаться с первое раз каждый раз” “чак норрис не писать документация он смотреть в упор на код до тот пора пока тот не сказать весь что надо знать” 9 uml бертран мейер рассказывать о тот что он удивлять почему схематический язык программирование всегда быть такой популярный пока однажды он не осенило: “пузырь не ломаются!” (другий высказывание принадлежащий мейеру: “all you need is code”) похоже что с тем что обычно пониматься под разработка через моделирование тоже что-то не так: не код должный генерироваться из модель — модель должный быть код между прочить fortran продаваться как язык высокий уровень из который генерироваться исходный код а теперь язык высокий уровень для мы и есть исходный код надеяться однажды когда мы повзрослеть модель быть считаться считаться исходный код 10 очередной новый вещь и наконец коронный фраза который я ненавижу: “объект недостаточно нужно еще” весь этот год мы нужный быть фреймворка компонента аспект сервис (которое похоже любопытный образ вернуть мы к процедурный программированию!) если объект никогда не быть достаточно почему же они исправно служить мы весь этот годы? вывод? 25 год назад мы не ожидать что “новый” феномен ооп прожить столь долго мы думать что оо-конфереция тип ecoop oopsla просуществовать год 5 а затем затеряться в мейнстрим но и сейчас слишком рано игнорировать ооп как часть мейнстрить а тот факт что научный и промышленный исследование в область объектно-ориентированный программирование ещё продолжаться подсказывать что происходить что-то важный что мы ещё не понимать полностью ооп позволять упрощать сложный вещий через моделирование но мы весь ещё не овладеть это возможно потому что плохо различать существенный и несущественный сложность чтобы двигаться далёкий мы должный сосредоточиться на изменчивость и на тот как ооп мочь содействовать изменчивость спустя столько год мы весь ещё находиться в самый начало пытаться понять что же ооп мочь предложить мы спасибо за прочтение! немного о автор oscar nierstrasz — профессор computer science в бернский университет основатель software composition group который исследовать механизм позволять компьютерный система быть гибкий и хороший приспосабливаться к изменяться условие (отсюда понятно стремление автор к внедрение механизм изменчивость в яп) активный участник исследовательский ооп-сообщество участник и председатель такой конференция как ecoop esec и models (дать статья — как раз речь oscar' на конференция ecoop 2010) также главный редактор the journal of object technology соавтор более 200 публикация и 2 книг: object-oriented reengineering patterns и pharo by example (об книга по-видимому не перевести на русский зато бесплатный и доступный для скачивание по ссылкам) 