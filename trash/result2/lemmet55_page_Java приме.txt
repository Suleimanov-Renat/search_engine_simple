java пример из книга и документация набор пример составить из книга и документация pdf + исходник java books and internet samples by padaboo ib aleksandrov pdf исходник basics data types package basics; /** * * @author padaboo ib aleksandrov */ public class datatypes { public static void main(string[] args) { datatypes app = new datatypes(); //int 4byte -2147483648 2147483648 int i = 1; //short 2byte -32768 32767 short s = 1; //long 8byte -9223372036854775808 -9223372036854775807 long l = 1; //byte 1byte -128 до 127 byte b = 1; //float 4byte +-340282347e+38f float f = 01f; //double 8byte +-17976931348623157e+308f double d = 02f; //char char c = 'd'; //boolean true false logical 1/0 boolean bool = true; } //public static constatn available in any method in other classes //a constant can not be changed public static final double con = 03f; } math package basics; /** * https://docsoraclecom/javase/tutorial/java/data/beyondmathhtml * @author padaboo ib aleksandrov */ public class javamath { public static void main(string[] args) { /** mathabs (n) - returns the unit number n mathround (n) - returns an integer closest to a real number n (rounds n) mathceil (n) - returns the closest number to the number n to the right of zero fractional part (eg mathceil (34) returns a result of 40) mathcos (n) mathsin (n) mathtan (n) - trigonometric function sin cos tg and the argument n indicated in radians mathacos (n) mathasin (n) mathatan (n) - inverse trigonometric functions return the angle in radians mathtodegrees (n) - a measure of returns-degree angle in radians n mathtoradians (n) - returns radian measure of an angle in degrees n mathsqrt (n) - returns the square root of n mathpow (n b) - returns the value of the power function of degree n b the base and the exponent may be real mathlog (n) - returns the natural logarithm of n mathlog10 (n) - returns the logarithm of n */ systemoutprintln(mathabs(-233)); systemoutprintln(mathround(mathpi)); systemoutprintln(mathround(95)); systemoutprintln(mathround(95-0001)); systemoutprintln(mathceil(94)); double c = mathsqrt(3*3 + 4*4); systemoutprintln(c); double s1 = mathcos(mathtoradians(60)); systemoutprintln(s1); } } operations package basics; /** * * @author padaboo ib aleksandrov */ public class operations { public static void main(string[] args) { operations app = new operations(); /** * + sum * - subtraction * / division * * multiplication * % remainder of the division */ int x = 1; x = x + x; systemoutprintln(x); //2 //x+1 ++x; systemoutprintln(x); //3 x += 2; systemoutprintln(x); //5 /** * logical operations * == equally * != not equally * <= less or equal * => more or equal * < less * > more * && and * || or */ boolean result = (x != 1); systemoutprintln(result); //true result = ((x != 1) && (x == 2)); systemoutprintln(result); //false //ternar (condition) ? expression_1 : expression_2 //if the expression is true if the first part is done there is no second result = x>3 ? true : false; systemoutprintln(result); /** * byte operations * & byte and * | byte or * ^ excluding or * ~ not * >> bit shift to the right * << bit shift to the left */ /** * priority * [] () from right to left * !~++--+()new from right to left * * / % from left to right * + - from left to right * << >> >>> from left to right * < <= > >= instanceof from left to right * == != from left to right * & from left to right * ^ from left to right * | from left to right * && from left to right * || from left to right * ?: from right to left * = += -= *= /= %= |= ^= <<= >>= >>>= from right to left */ // null - empty field // nan - not a number } } constructions package basics; /** * * @author padaboo ib aleksandrov */ public class constructions { //public visible inside and outside public int pub = 1; //private visible inside private int pri = 2; //protected visible inside and in child class protected int pro = 3; //public static varible public static int staticvar = 4; //constant public final static int finalvar = 4; //enum is used as a constant enum modifier { public protected private abstract static final transient volatile synchronized native strictfp; } public static void main(string[] args) { //local varible of method (funttion) int localvarible = 0; //create exemplar of class (object) constructions constructions constructions = new constructions(); //if condition if(1 == 1){ //true } else { //false } //else if if (false){ }else if (false){ }else { //do } //for: repeating cycle with the condition 1 for(int i=1; i<5; i++){ systemoutprintln("i is: " + i); } //for: repeating cycle with the condition 2 int[] numbers = {12345678910}; for (int item : numbers) { systemoutprintln("i is: " + item); } //while true int n = 5; while (n > 0) { systemoutprintln("while " + n); n--; } //do while true int i = 0; do{ systemoutprint ("while " + ++i); } while (i < 10); //continue skip iteration/next //new create a new object string s = new string(); //selection operator int month = 3; switch (month) { case 1: s = "1"; break; case 2: s = "2"; break; case 3: s = "3"; break; case 4: s = "4"; default: break; } //print case result systemoutprintln(s); //private varible systemoutprintln(constructionspri); //public varible systemoutprintln(constructionspub); //protected varible systemoutprintln(constructionspro); systemoutprintln(staticvar*2); //call function from object systemoutprintln(constructionsfunc()); //call overload function func with 2 arguments systemoutprintln(constructionsfunc(22)); //call enum modifier modifier variablemodifier = modifierpublic; systemoutprintln(variablemodifier); } /** * private function return type int no arguments */ private int func(){ //do return 128; } /** * function overloading with 2 arguments * @param a * @param b * @return int */ private int func(int aint b){ return a*b; } } strings package basics; /** * * @author padaboo ib aleksandrov */ public class strings { public static void main(string[] args) { string j = "jmonkey"; string e = "engine"; //concatenation systemoutprintln(j+3); //jmonkey3 systemoutprintln(j + " " + e); //equals == systemoutprintln(jequals("jmonkey")); //length systemoutprintln(jlength()); //substring start end systemoutprintln(jsubstring(03)); //jmo //first symbol char first = jcharat(0); //j systemoutprintln(first); char arr[] = {'j''m''3'}; string fromchar = new string(arr); systemoutprintln(fromchar); //jdk api string https://docsoraclecom/javase/7/docs/api/java/lang/stringhtml } } arrays package basics; import javautilarraylist; /** * java arrays * @author padaboo ib aleksandrov */ public class arrays { public static void main(string[] args) { //create array of integer size 3 int[] a = new int[3]; a[0] = 1; a[1] = 2; a[2] = 3; int[] b = {123}; for(int j = 0; j <= blength - 1; j++) { systemoutprintln(b[j]); } //multidimensional array int[][] ab = new int[6][4]; //int[][] ab = {{23}{22}}; for(int i=0; i<ablength; i++) { for(int j=0; j<ab[i]length; j++) { ab[i][j] = (int)(mathrandom()*10); } } //array of objects car[] cars = new car[10]; //array list arraylist<car> carlist = new arraylist<car>(); int i = 0; //add objects to array list while(i< 3){ carlistadd(new sportcar()); } car[] carsarray = new car[carlistsize()]; carlisttoarray(carsarray); //add(ne); //remove(n); //https://docsoraclecom/javase/7/docs/api/java/util/arraylisthtml } } collections package basics; import javautilhashmap; import javautiliterator; import javautillinkedhashmap; import javautillinkedlist; import javautillist; import javautilmap; import javautilmapentry; import javautilqueue; import javautilset; import javautiltreemap; /** * linkedlist hashmap linkedhashmap treemap * https://docsoraclecom/javase/7/docs/api/java/util/collectionshtml * @author padaboo ib aleksandrov */ public class collections { public static void main(string[] args) { collections app = new collections(); //applinkedlistexample(); //apphashmapexample(); //applinkedhashmap(); //apptreemapexample(); appqueueexample(); } private void linkedlistexample(){ //java linkedlist list<string> list = new linkedlist<string>(); listadd("player 1"); listadd("player 2"); listadd("player 3"); iterator iter = listiterator(); while(iterhasnext()){ systemoutprintln(iternext()); } for(int num=0; num<listsize(); num++){ systemoutprintln(listget(num)); } for (iterator<string> it = listiterator(); ithasnext();) { string str = itnext(); systemoutprintln(str); } listget(0); listset(1"monster"); listremove(0); listsize(); //https://docsoraclecom/javase/7/docs/api/java/util/linkedlisthtml } private void hashmapexample(){ //java hashmap example map<string car> hashmap = new hashmap<string car>(); hashmapput("id1" new sportcar()); hashmapput("id2" new sportcar()); hashmapput("id3" new sportcar()); sportcar itercar; for (mapentry entry : hashmapentryset()) { itercar = (sportcar)entrygetvalue(); systemoutprintln("key: " + entrygetkey() + " val: "+ itercargetspeed()); } } private void linkedhashmap(){ //java linkedhashmap example linkedhashmap<integer string> map = new linkedhashmap<integer string>(); mapput(1 "java"); mapput(2 "jmonkey"); mapput(3 "3d"); mapput(4 "convas"); mapput(5 "clientserver"); //mapget(4); set set = mapentryset(); iterator iterator = setiterator(); mapentry me; while(iteratorhasnext()) { me = (mapentry)iteratornext(); systemoutprintln("key: "+ megetkey() + " val: "+megetvalue()+"\n"); } } private void treemapexample(){ treemap<integer string> tmap = new treemap<integer string>(); tmapput(1 "blender"); tmapput(3 "ogre3d"); tmapput(70"animation"); tmapput(4 "shaders"); for (entry<integer string> entry : tmapentryset()) { systemoutprintln(entrygetkey() + " - " + entrygetvalue()); } } private void queueexample(){ queue<string> qe=new linkedlist<string>(); qeadd("java oracle"); qeadd("ubuntu linux"); qeadd("convas 3d"); for (string iteratorvalue : qe) { systemoutprintln("queue next value :"+iteratorvalue); } } } try cahtch package basics; import javautillogginglevel; import javautillogginglogger; /** * https://docsoraclecom/javase/tutorial/essential/exceptions/ * @author padabo ib aleksandrov */ public class exceptiontrycatchfinally { public static void main(string[] args) { try{ throw new exception("simple exception"); }catch(exception e){ loggergetlogger(ioclassgetname())log(levelsevere null e); systemoutprintln(egetmessage()); }finally{ systemoutprintln("finally"); } } } objects abstarct car package basics; /** * abstract class (have abstract methods) * @author padaboo ib aleksandrov */ public abstract class car{ protected int speed; protected string color; /** * constructor */ public car(){ speed = 50; } /** * overload * @param color */ public car(string color){ thiscolor = color; } /** * a common method for all heirs */ public void drive(){ //do drive } /** * a method that must be implemented in all heirs */ abstract boolean painting(string newcolor); /** * * @return int speed */ public int getspeed(){ return speed; } /** * a method that must be implemented in all heirs */ abstract void acceleration(int a); } sport car /* */ package basics; /** * heir class abstract class car * @author padaboo ib aleksandrov */ public class sportcar extends car { @override boolean painting(string newcolor) { color = newcolor; return true; } public void acceleration(int a) { speed = speed * a; } } /* */ package basics; /** * heir class abstract class car * @author padaboo ib aleksandrov */ public class sportcar extends car { @override boolean painting(string newcolor) { color = newcolor; return true; } public void acceleration(int a) { speed = speed * a; } } package basics; /** * objects abstract extends protected * @author padaboo ib aleksandrov */ public class objects { public static void main(string[] args) { car sportcar = new sportcar(); systemoutprintln(sportcargetspeed()); sportcaracceleration(20); systemoutprintln(sportcargetspeed()); } } reflections package basics; import javalangreflectfield; /** * * @author padaboo ib aleksandov */ public class reflection { public static void main(string[] args) throws classnotfoundexception instantiationexception illegalaccessexception { //get class name sportcar sc = new sportcar(); string name = scgetclass()getname(); systemoutprintln(name); //object from class name object rsc = (object) classforname(name)newinstance(); systemoutprintln(rsctostring()); //get class class csc = sportcarclass; systemoutprintln(csc); //get fields of super class field[] fields = sportcarclassgetsuperclass()getdeclaredfields(); for (field field : fields) { systemoutprintln(fieldgetname()); } //https://docsoraclecom/javase/tutorial/reflect/ } } parametrization package basics; /** * java parametrizations generic inner class example * @author padaboo ib aleksandrov */ public class parametrization{ //https://docsoraclecom/javase/tutorial/extra/generics/methodshtml public static void main(string[] args) { parametrization app = new parametrization(); appgenerictest(); } private void generictest(){ genericobj<stringcar> g = new genericobj<stringcar>("test"new sportcar()); } class genericobj<stringt extends car> { public string name; public t car; private genericobj(string str t carobj) { car = carobj; name = str; } } } class path package basics; import javaiofile; /** * http://docsoraclecom/javase/tutorial/essential/environment/sysprophtml * @author padaboo ib aleksandrov */ public class classpath { public static void main(string[] args) { systemgetproperty("javaclasspath"); string classpath = systemgetproperty("javaclasspath"); string[] classpathentries = classpathsplit(filepathseparator); for(string s: classpathentries){ systemoutprintln(s); } } } io /* <?xml version="10" encoding="utf-8"?> <root> <rows> <item name="player1" level="20" /> <item name="player2" level="15" /> <item name="player3" level="10" /> </rows> <system fps="60"/> </root> */ package basics; import javaiobufferedreader; import javaiofile; import javaiofilereader; import javaiofilewriter; import javaioioexception; /** * https://docsoraclecom/javase/tutorial/essential/io/scanninghtml * io java read file write file sample; * @author padaboo ib aleksandrov */ public class io { string filename = "iotestxml"; string content; string absolutefilepath; string workingdirectory; public static void main(string[] args) throws ioexception { io app = new io(); appworkingdirectory = appgetworkingdirectory(); appabsolutefilepath = appworkingdirectory + appfilename; appcontent = appreadfile(appabsolutefilepath); appcontent += "append"; appwritefile(appabsolutefilepathappcontent); } private string getworkingdirectory(){ return systemgetproperty("userdir") + fileseparator + "src"+fileseparator+ "basics"+fileseparator; } private string readfile(string path) throws ioexception{ bufferedreader br = new bufferedreader(new filereader(path)); stringbuilder sb = new stringbuilder(); string line = brreadline(); while (line != null) { sbappend(line); sbappend(systemlineseparator()); line = brreadline(); systemoutprintln(line); } brclose(); return sbtostring(); } private void writefile(string pathstring str) throws ioexception{ file file = new file(path); filewriter writer = new filewriter(file); writerwrite(str); writerflush(); writerclose(); } } xml /* <?xml version="10" encoding="utf-8"?> <root> <rows> <item name="player1" level="20" /> <item name="player2" level="15" /> <item name="player3" level="10" /> </rows> <system fps="60"/> </root> */ package basics; import javaiofile; import javaioioexception; import javaxxmlparsersdocumentbuilder; import javaxxmlparsersdocumentbuilderfactory; import javaxxmlparsersparserconfigurationexception; import orgw3cdomnode; import orgw3cdomnodelist; import orgxmlsaxsaxexception; /** * https://docsoraclecom/javase/7/docs/api/javax/xml/xpath/package-summaryhtml * https://docsoraclecom/javase/tutorial/jaxp/sax/parsinghtml * xml xpath sample * @author padaboo ib aleksandrov */ public class xmlsample { public static void main(string[] args) throws ioexception parserconfigurationexception saxexception { string filepath = xmlsamplegetworkingdirectory() + "iotestxml"; documentbuilderfactory factory = documentbuilderfactorynewinstance(); factorysetnamespaceaware(true); documentbuilder builder; orgw3cdomdocument doc = null; builder = factorynewdocumentbuilder(); doc = (orgw3cdomdocument) builderparse(new file(filepath)); nodelist ltemslist = docgetelementsbytagname("item"); for(int i=0; i<ltemslistgetlength() ; i++) { node itemnode = ltemslistitem(i); systemoutprintln(itemnodegetattributes()getnameditem("level")getnodevalue()); } } public static string getworkingdirectory(){ return systemgetproperty("userdir") + fileseparator + "src"+fileseparator+ "basics"+fileseparator; } } system command line package sys; /** * https://docsoraclecom/javase/tutorial/essential/environment/cmdlineargshtml * @author padaboo ib aleksandrov */ public class commandlinesample { public static void main(string[] args){ if (argslength > 0) { for (string s: args) { systemoutprintln(s); } } } } execute package sys; import javaiobufferedreader; import javaioioexception; import javaioinputstreamreader; /** * https://docsoraclecom/javase/7/docs/api/java/lang/runtimehtml * @author padaboo ib aleksandrov */ public class executesample { public static void main(string[] args) throws ioexception interruptedexception { process p = runtimegetruntime()exec("pwd"); pwaitfor(); bufferedreader reader = new bufferedreader(new inputstreamreader(pgetinputstream())); string line = ""; while ((line = readerreadline()) != null) { systemoutprintln(line); } } } key press package sys; import javautilscanner; /** * https://docsoraclecom/javase/tutorial/essential/io/scanninghtml * @author padaboo ib aleksandrov */ public class inscannerkeypress { public static void main(string[] args) { scanner keyboard = new scanner(systemin); boolean exit = false; while (!exit) { string input = keyboardnextline(); if(input != null) { systemoutprintln("your input is : " + input); if ("quit"equals(input)) { exit = true; } else if ("x"equals(input)) { } } } keyboardclose(); } } native sample package sys; /** * * https://www3ntuedusg/home/ehchua/programming/java/javanativeinterfacehtml * https://enwikipediaorg/wiki/java_native_interface * @author padaboo ib aleksandrov */ public class nativesample { public native void displayhelloworld(); static{ systemloadlibrary("hello"); } public static void main(string[] args){ /** javac nativesamplejava $ javah -classpath  nativesample $ gcc -shared -fpic -i $java_home/include -i $java_home/include/linux hellocpp -o helloso $ java -classpath  -djavalibrarypath= helloworld hello world! */ new nativesample()displayhelloworld(); } } /** #include "hellojnicppimplh" #include <iostream> using namespace std; void sayhello () { cout << "hello world from c++!" << endl; return; } */ /** #ifndef _hello_jni_cpp_impl_h #define _hello_jni_cpp_impl_h #ifdef __cplusplus extern "c" { #endif void sayhello (); #ifdef __cplusplus } #endif #endif */ threads thread package threads; /** * https://docsoraclecom/javase/7/docs/api/java/lang/threadhtml * java threads * @author padaboo ib aleksandrov */ public class threadsample{ public static void main(string[] args) { threadsample app = new threadsample(); appthreadrun(); } class mythread extends thread{ @override public void run() { systemoutprintln("run"); } } private void threadrun(){ mythread t = new mythread(); tstart(); } } thread sleep package threads; import javautillogginglevel; import javautillogginglogger; /** * https://docsoraclecom/javase/tutorial/essential/concurrency/sleephtml * java thread sleep * @author padaboo ib aleksandrov */ public class threadsleepsample { public static void main(string[] args) { threadsleepsample app = new threadsleepsample(); appthreadsleeptest(); } private void threadsleeptest(){ runnable r; r = new runnable() { public void run() { for (int i = 0; i < 9; i = i + 1){ try { systemoutprintln("run " + i); threadsleep(500); } catch (interruptedexception ex) { loggergetlogger(threadsleepsampleclassgetname())log(levelsevere null ex); } } } }; thread t = new thread(r); tstart(); } } thread lock package threads; import javautilconcurrenttimeunit; import javautilconcurrentlockslock; /** * https://docsoraclecom/javase/tutorial/essential/concurrency/newlockshtml * java lock sample * @author padaboo ib aleksandrov */ public class threadlock implements runnable{ private lock lock; public static void main(string[] args){ threadlock app = new threadlock(); } @override public void run() { try { if(locktrylock(10 timeunitseconds)){ //do } } catch (interruptedexception e) { eprintstacktrace(); }finally{ //unlock lockunlock(); } } } thread local package threads; /** * java threadlocal example * https://docsoraclecom/javase/7/docs/api/java/lang/threadlocalhtml * @author padaboo ib aleksandrov */ public class threadlocalsample implements runnable { threadlocal<string> str = new threadlocal<string>(){ @override protected string initialvalue(){ return new string("test"); } };; public static void main(string[] args){ threadlocalsample app = new threadlocalsample(); thread t = new thread(app); tstart(); } public void run() { systemoutprintln(strget()); } } daemon thread package threads; /** * https://docsoraclecom/javase/7/docs/api/java/lang/threadhtml * java daemon thread * @author padaboo ib alelsandrov */ public class daemonthread extends thread{ public static void main(string[] args) throws interruptedexception { daemonthread t = new daemonthread(); tsetdaemon(true); tstart(); try { threadsleep(3000); } catch (interruptedexception x) {} } @override public void run() { while (true) { systemoutprintln("daemon run "); try { sleep(500); } catch (interruptedexception e) { // handle exception here } } } } runnable package threads; /** * java runnable threads * @author padaboo ib aleksandrov */ public class runnablesample implements runnable{ public static void main(string[] args) { runnablesample run = new runnablesample(); thread t = new thread(run); tstart(); } public void run() { int i = 1; while(i<=10){ systemoutprintln(i); i++; } } } runanble handler package threads; /** * java runnable handler * @author padaboo ib aleksandrov */ public class runnablehandler { public static void main(string[] args) { runnablehandler app = new runnablehandler(); apphadlertest(); } public void hadlertest(){ runnable handler = new runnable(){ public void run() { systemoutprintln("run"); } }; thread t = new thread(handler); tstart(); } } thread isinterrupted package threads; /** * https://docsoraclecom/javase/tutorial/essential/concurrency/interrupthtml * @author padaboo ib aleksandrov */ public class threadinterrupted extends thread{ public static void main(string[] args){ threadinterrupted app = new threadinterrupted(); appstart(); } public void run( ) { int i = 0; while (!isinterrupted( )) { systemoutprintln("i:"+i); i++; } } } thread executors package threads; import javautilconcurrentexecutor; /** * https://docsoraclecom/javase/7/docs/api/java/util/concurrent/executorhtml * java thread executors * @author padaboo ib aleksandrov */ public class executorssample { public static void main(string[] args) { executorssample app = new executorssample(); appexecutorstest(); } private void executorstest(){ executor executor = new executor() { public void execute(runnable command) { commandrun(); } }; runnable command = new runnable() { public void run() { systemoutprintln("run"); } }; executorexecute(command); } } thread executors services package threads; import javautilconcurrentexecutorservice; import javautilconcurrentexecutors; /** * java executor executorservice * https://docsoraclecom/javase/7/docs/api/java/util/concurrent/executorservicehtml * @author padaboo ib aleksandrov */ public class executorsservicessample { executorservice pool = executorsnewfixedthreadpool(2); public static void main(string[] args) { executorsservicessample app = new executorsservicessample(); appexecutorsservicestest(); } private void executorsservicestest(){ poolexecute(new handler(1)); poolexecute(new handler(2)); poolshutdown(); } class handler implements runnable { private final int number; handler(int number) { thisnumber = number; } public void run() { systemoutprintln("thread" + thisnumber); } } } thread callable future package threads; import javautilconcurrentcallable; import javautilconcurrentexecutionexception; import javautilconcurrentexecutorservice; import javautilconcurrentexecutors; import javautilconcurrentfuture; /** * java callable future sample * https://docsoraclecom/javase/7/docs/api/java/util/concurrent/callablehtml * @author padaboo i b aleksandrov */ class callablefuturesample { public static void main(string[] args) throws executionexception interruptedexception{ callablefuturesample app = new callablefuturesample(); appcallabletest(); } private void callabletest() throws executionexception interruptedexception{ executorservice ex = executorsnewcachedthreadpool(); callablethread call = new callablethread(); future<integer> future = exsubmit(call); systemoutprintln(futureget()); exshutdown(); } class callablethread implements callable<integer>{ public integer call() throws exception { int i = 1; return i; } } } thread count down latch package threads; import javautilconcurrentcountdownlatch; /** *https://docsoraclecom/javase/7/docs/api/java/util/concurrent/countdownlatchhtml * @author padaboo ib aleksandrov */ public class countdownlatchsample { public static void main(string args[]) throws interruptedexception { countdownlatchsample app = new countdownlatchsample(); appcountdownlatchtest(); } private void countdownlatchtest() throws interruptedexception{ countdownlatch startsignal = new countdownlatch(1); countdownlatch donesignal = new countdownlatch(2); for (int i = 0; i < 2; ++i) // create and start threads new thread(new worker(startsignal donesignal))start(); startsignalcountdown(); // let all threads proceed donesignalawait(); } class worker implements runnable { private final countdownlatch startsignal; private final countdownlatch donesignal; private worker(countdownlatch startsignal countdownlatch donesignal) { thisstartsignal = startsignal; thisdonesignal = donesignal; } public void run() { try { startsignalawait(); dowork(); donesignalcountdown(); } catch (interruptedexception ex) {} // return; } void dowork() { systemoutprintln("work"); } } } scheduled thread pool package threads; import javautilconcurrentexecutors; import javautilconcurrentscheduledexecutorservice; import javautilconcurrenttimeunit; /** * https://docsoraclecom/javase/7/docs/api/java/util/concurrent/scheduledexecutorservicehtml * @author padaboo ib aleksandrov */ public class scheduledthreadpoolsample { public static void main(string[] args) throws interruptedexception { scheduledthreadpoolsample app = new scheduledthreadpoolsample(); } private void scheduledtest() throws interruptedexception{ scheduledexecutorservice scheduledthreadpool = executorsnewscheduledthreadpool(5); for(int i=0; i<3; i++){ threadsleep(1000); workerthread worker = new workerthread("run"); scheduledthreadpoolschedule(worker 10 timeunitseconds); } //add some delay to let some threads spawn by scheduler threadsleep(30000); scheduledthreadpoolshutdown(); while(!scheduledthreadpoolisterminated()){ //wait for all tasks to finish } systemoutprintln("finished all threads"); } public class workerthread implements runnable{ private string command; public workerthread(string str){ thiscommand = str; } @override public void run() { processcommand(); } private void processcommand() { try { threadsleep(5000); } catch (interruptedexception e) { eprintstacktrace(); } } @override public string tostring(){ return thiscommand; } } } thread synchronized package threads; /** * java syncronized * @author padaboo ib aleksandrov */ public class threadsyncsample{ sync synchobj; public static void main(string[] args){ threadsyncsample app = new threadsyncsample(); appsynctest(); } private void synctest(){ synchobj = new sync(); runnable r = new runnable() { public void run() { //synchronized method synchobjplus(); systemoutprintln("synchronized method" + synchobjgetj()); } }; thread t = new thread(r); tstart(); } class sync{ int j = 1; public synchronized void plus(){ j++; } public synchronized int getj(){ return j; } public void synctest(){ synchronized (this) { systemoutprintln("notifyall"); thisnotifyall(); } } } } net client socket package net; import javaiobufferedreader; import javaioinputstreamreader; import javanetsocket; /** * https://docsoraclecom/javase/tutorial/networking/sockets/readingwritinghtml * @author padaboo ib aleksandrov */ public class clientsocketsample { public static void main(string[] args) throws exception { socket s = new socket("127001" 8080); bufferedreader input = new bufferedreader(new inputstreamreader(sgetinputstream())); string answer = inputreadline(); systemoutprintln(answer); systemexit(0); } } server socket package net; import javaioprintwriter; import javanetserversocket; import javanetsocket; import javautildate; /** * https://docsoraclecom/javase/tutorial/networking/sockets/clientserverhtml * @author padaboo ib aleksandrov */ public class serversocketsample { public static void main(string[] args) throws exception { serversocket listener = new serversocket(8080); try { while (true) { socket socket = listeneraccept(); try { printwriter out = new printwriter(socketgetoutputstream() true); outprintln(new date()tostring()); } finally { socketclose(); } } } finally { listenerclose(); } } } thread server package net; import javaioioexception; import javaioinputstream; import javaiooutputstream; import javaioprintwriter; import javanetserversocket; import javanetsocket; import javautilscanner; import javautillogginglevel; import javautillogginglogger; /** * thread server messages * @author padaboo ib aleksandrov */ public class threadserversample { public static void main(string[] args){ threadserversample app = new threadserversample(); try { appstartup(); } catch (ioexception ex) { loggergetlogger(threadserversampleclassgetname())log(levelsevere null ex); } } private void startup() throws ioexception{ serversocket sock = new serversocket(8080); int i = 1; while(true){ socket in = sockaccept(); runnable r = new threadserver(in); thread t = new thread(r); tstart(); } } class threadserver implements runnable{ socket in; private threadserver(socket in) { thisin = in; } public void run() { try { inputstream instream = ingetinputstream(); outputstream outstream = ingetoutputstream(); scanner in = new scanner(instream); printwriter out = new printwriter(outstream); while(inhasnextline()){ string line = innextline(); outprintln(line); } } catch (ioexception ex) { loggergetlogger(threadserversampleclassgetname())log(levelsevere null ex); } } } } url sample package net; import javaiobufferedreader; import javaioinputstreamreader; import javaneturl; /** * https://docsoraclecom/javase/tutorial/networking/urls/readingurlhtml * @author padaboo ib aleksandrov */ public class urlsample { public static void main(string[] args) throws exception { url oracle = new url("http://1921680101/"); bufferedreader in = new bufferedreader( new inputstreamreader(oracleopenstream())); string inputline; while ((inputline = inreadline()) != null) systemoutprintln(inputline); inclose(); } } mysql jdbc package jdbcmysql; import javasqlconnection; import javasqldrivermanager; import javasqlresultset; import javasqlresultsetmetadata; import javasqlstatement; /** * jdbc mysql example (have a dump file) * connector http://devmysqlcom/downloads/connector/j/ * statement https://docsoraclecom/javase/tutorial/jdbc/basics/processingsqlstatementshtml * prepared http://docsoraclecom/javase/tutorial/jdbc/basics/preparedhtml * @author padaboo ib aleksandrov */ public class mysqlconnectsample { public static void main(string[] args) throws exception { connection conn = drivermanagergetconnection("jdbc:mysql://127001:3306/jdbctest""root" ""); string query = "select * from jdbctestusers;"; //execute mysql procedure //callablestatement stmt; statement stmt = conncreatestatement(); resultset rs = stmtexecutequery(query); //stmtexecuteupdate(sql); resultsetmetadata md = rsgetmetadata(); systemoutprintln("count " + mdgetcolumncount()); while (rsnext()) { int id = rsgetint("id"); systemoutprintln(id); } rsclose(); } } dump create database `jdbctest` character set utf8 collate utf8_general_ci; create table `jdbctest``users` ( `id` int not null auto_increment `name` varchar(128) null `session_key` varchar(128) null `email` varchar(128) character set 'utf8' collate 'utf8_general_ci' null `password` varchar(128) null `activation_key` varchar(128) character set 'utf8' collate 'utf8_general_ci' null primary key (`id`)); insert into `jdbctest``users` (`name` `session_key` `email` `password` `activation_key`) values ('ivan2' 'asdasddd' 'jetananas@yandexru' 'asdasad' 'asaadads'); insert into `jdbctest``users` (`name` `session_key` `email` `password` `activation_key`) values ('ivan1' 'asdasddd' 'jetananas@yandexru' 'asdasad' 'asaadads'); 