производительность java: настоящее и будущее уже два десятилетие активно плодиться миф о тот что приложение на java свойственный проблема с производительность одновременно с это на java создаваться по-настоящему высоконагруженный система кто же в конечный итог прав? чтобы составить мнение о тот как сейчас обстоять дело с производительность java мы обратиться к два заинтересовать сторонам: создатель самый java и клиент использовать java в свой система на наш вопрос любезно согласиться ответить алексей шипилёва (oracle) и олег анастасьев (одноклассники) java performance глаз создатель jdk jugru: рассказать пожалуйста о себя и о свой работе? алексей шипилёв: я звать алексей шипилёва я работать над производительность java уже более 10 год за это время я успеть поработать над разный jvm — сначала над apache harmony в intel потом перейти в sun microsystems где заниматься openjdk на текущий момент мой работа по больший часть заключаться в тот чтобы находить проблема производительность в продукт и обозначать путь они решение или же исправлять собственный рука если проблема простой сюда входить и оптимизация под стандартный бенчмарка тестировать производительность виртуальный машина и решение клиентский проблема (оптимизация они приложений) и улучшение глобальный вещий который необходимый многомиллионный экосистема java jugru: как вы считать корректно ли вообще на сегодняшний день говорить о тот что производительность — проблема в целое java как технология а не отдельный приложений? алексей шипилёв: о это сложно говорить поскольку производительность чаща определяться весь же код конечный приложение а не задействовать для он создание язык у язык программирование вообще нет производительность она мочь быть только у реализация это язык причём различный реализация мочь быть много однако в мир java случиться так что чаща всего речь идти о реализация jdk от sun/oracle который занимать более 95% рынок её и быть иметь в вид в самый начало в 1995 — 2000 год java как и всякий молодая продукт действительно быть не очень эффективно реализовать но за последний десятилетие в реализация java сделать настолько много что проблема который ранний считаться типичный перестать так сильно и так больно бить разработчик по голов конечно многие сложность связанный с разработка высокопроизводительный приложение сохраниться так что говорить что этот проблема окончательно решить по-моему неосмотрительно есть ещё много вещий который необходимый докручивать но важный помнить что далеко не весь нужный высокопроизводительный решения: у многий разработчик производительность не входить в список критерий успех — "работать за приемлемый время" и хорошо если же разработчик действительно нужный каждый последний капля производительность имя прийтись обходить подводный камень который присутствовать в любой достаточно сложный продукт (а виртуальный машина hotspot — и openjdk в целое — очень сложный продукт) jugru: иной слово производительность уже не являться глобальный проблема java? алексей шипилёв: думать да честно говорить я кажется что проблема производительность люба платформа — преувеличить как я говорить большинство приложение не требовать большой производительность но в программистский сообщество существовать стойкий легенда и простой рецепт который очень удобно повторять (когда ты они повторять кажется что присоединяться к группа посвящённых!) и один из такой легенда заключаться в тот что "java тормозит" лично я уверенный что она давно не релевантный для она быть объективный подтверждение год 10-15 назад но сейчас обстановка измениться безусловно и сейчас можно написать приложение который наступить на проблема с производительность в рантайм но этот проблема в основное известный для они есть обходный путь а тот кома такой путь не подходить создавать собственный "костыли" jugru: насколько активно идти развитие jdk и соответственно устранение известный проблема производительность (ести говорить о oracle jdk)? алексей шипилёв: достаточно активно и это есть причина — экосистема java очень большой даже в пересчёт на один компания у тот же oracle энтерпрайза-стек написать на java соответственно любой улучшение который делаться в платформа распространяться по весь стечь и облегчать жизнь в тот число и разработчик oracle но это история почему oracle развивать openjdk этот история в разный качество повторяться и для другой вендор и для другой проект с открытый код jugru: какой последний нововведение в java вы казаться наиболее значимый с точка зрение повышение производительности? алексей шипилёв: во-первых я нравиться что история с сборщик мусор garbage-first (g1) потихоньку идти к логический конец garbage-first быть анонсировать давно но только в java 8 и 9 он стать себя довольно прилично вести так что он можно использовать в промышленный масштаб — настолько что в java 9 он включить по умолчание этот многолетний проект наконец-то выстреливать и делать вещий который задумываться с самый начало во-вторых я близкий история с высокопроизводительный приложение который требовать unsafe на замена часть который разрабатываться varhandles есть легитимный случай когда хотеться выжать последний капля производительность при помощь низкоуровневый хаковы но unsafe как известно — это приватный api толком не стандартизировать тот он использование — это бег с острый ножницы по тлеть уголь гореть здание а varhandles — это один из путь при помощь который мы мочь предоставить публичный api для такой редкий но важный случай когда нужный максимальный производительность или какой-то функциональность который иначе не доступный ещё один интересный нововведение — compact strings я лично участвовать в это проект и прочий "строковых" оптимизация подобный род изменение платформа серьёзно улучшать общеупотребительный класс существенно повышать производительность вообще весь приложение который написать на java и тем самый ещё большой снижать необходимость костыль и в дать случай мы получить очень хороший результат не только на синтетик но и на реальный приложение достигнутый улучшение занимать память и производительность на 10% на больший приложение — это очень хороший прирост для такой здоровый взрослый платформа как java jugru: раз уж мы говорить о производительность существовать ли какой-то "канонические" метод её измерения? сводиться ли для бизнес весь к деньгам? алексей шипилёв: производительность не всегда переводиться в деньга на практика довольно сложно оценить как прирост производительность влиять на экономический сторона вопрос часто это косвенный эффект — время который тратить программист на написание код укладываться в цель по производительности; время который тратить пользователь на ожидание результат и тп но с размещение сервер в облако и плотный датацентр производительность стать близкий к финансовый сторона вопроса: чем быстрый работать твой приложение тем маленький оно потреблять ресурс тем маленький ты платить за аренда и обслуживание сервер причём этот зависимость в хорошо масштабировать приложение мочь быть просто линейный тот разогнать на 50% свой приложение — ты нужно в 2 раз маленький железо платить за инфраструктура в 2 раз маленький кроме тот вопрос деньга возникать когда нужно оправдать временной затрата на оптимизация организация который заниматься коммерческий разработка — не богадельня они платить инженер чтобы тот помогать решать они бизнес-задача поэтому организация пытаться понять стоить ли финансировать конкретный направление разработки; сколько бизнес-профит дать этот результат так что оптимизация — это не просто "мы тут поковыряться отверточка потому что мы очень интересно ковыряться именно здесь" так мочь мыслить отдельный разработчик иногда удачно соотносить этот желание с бизнес-цель но бизнес сам по себя в оптимизация ради оптимизация не заинтересовать jugru: какой будущий нововведение в jdk на ваш взгляд наиболее ожидать с точка зрение управление производительностью? алексей шипилёв: value types — очень ожидать нововведение который на данный момент планироваться реализовать к выход java 10 это очень сложный проект который требовать подробный разбор как он стыковаться с весь остальной платформа "священный корова" java — это обратный совместимость нельзя сделать фич который её сломать (точный можно сломать её в какой-то мелкий момент но нужно очень хороший обоснование почему вы это ломать и какой у пользователь есть путь обхода) value types решать очень простой проблема один из столп java как язык программирование являться негласный свойство что (практически) весь — объект в это крыться интересный грабля: проистекать она из тот что у объект java есть индивидуальный свойство например идентичность (identity): если вы сделать объект у который записать число 42 в какой-то он пол и два объект в который лежать "такий же" число 42 то этот 2 объект — разный с точка зрение язык и отличаться как раз за счёт identity с точка зрение реализация это означать что и хранить нужно два отдельный копия этот практически одинаковый объект — например чтобы быть где сохранить метаинформация о они и когда в приложение появляться большой граф объект накладный расход для каждый объект пожирать существенный часть полезный память быть бы неплохо если бы в язык быть сущность без identity для который это можно быть бы избежать и такой сущность есть: примитивы! но они список жёстко зафиксировать естественный расширение — дать возможность декларировать сущность который записываться как класс а работать как примитив — это и есть value types value types существенно отличаться от привычный reference-тип например являться ли object супертип для весь value-типов? логично что нет и тогда появляться тонкий момент взаимодействие с дженерик с специализация и тп есть библиотека который делать подобный род специализация рука (тота же gnu trove) но весь хотеться чтобы это быть реализовать в самый язык так что этот очень ожидать фича: известно какой бонус она принесёт; известно сейчас какой возникнуть проблема однако в ход разработка мы посмотреть ещё сколько там реально бонус а сколько проблема jugru: учитывать что проблема производительность — скорее частное нежели глобальный можно ли говорить о какой-то типичный схема при оптимизация приложений? алексей шипилёв: существовать вполне конкретный методология который предписывать куда в один очередь стоить смотреть на основание тот или иной симптом мы с сергей куксенко и прочий делать доклад на этот тема к пример можно говорить что у мы очень хороший сборщик мусор но как ты не крутиться если быть очень много мусорить то в итог сборка мусор быть занимать существенный часть время какой рантайм ты не написать а если программист рука написать сортировка пузырёк или линейный поиск по массив в 100 миллион элемент быстро не быть тут никакой магия нет — один дурак мочь такой задачка загадать на который семеро мудрец не ответить по мой опыт мочь сказать что если производительность конкретный приложение никто никогда не заниматься или заниматься плохо то там почти наверняка (на 99%) есть множество идиотский или очевидный неэффективность который можно быстро обнаружить и быстро исправить поднять производительность в раз jugru: а кроме сборка мусор какой есть типичный проблема легко поддаваться оптимизации? алексей шипилёв: мой любимый — проблема с многопоточность известно что самый простой способ написать корректный многопоточный приложение — это щедро использовать синхронизация я не говорить что этот практика порочный но часто встречаться проблема с тем что аппаратный ресурс использоваться не полностью из-за постоянный блокировка это очень легко диагностироваться и зачастую легко исправляться (часто правда требовать правка в архитектуре) очень часто встречаться алгоритмический проблема когда переписывание плохой кусочек код на хороший кусочек который либо иметь хороший алгоритмический сложность в принцип или какой-нибудь способ использовать специфичный знание о дать в приложение получаться гигантский прирост который никакой рантаймный оптимизация и не сниться jdk/jvm-специфичный проблема встречаться но редко сюда падать и проблема с плотность дать в память (откуда мы опять махать рука value types) и проблема с высокоуровневый оптимизация (escape-анализ и автовекторизация привет!) и проблема с кодогенерация и тут скользкий вопрос — проблема в тот что рантайм плохой и не работать "правильно" или в тот что мы не хотеть в дать случай как-то изменить решение чтобы у мы быть производительность хороший (например использовать дополнительный библиотеку) разный человек и разный организация смотреть на это по-разному вообще с мой точка зрение оптимизация производительность java-приложение принципиально не отличаться от оптимизация какой-то нативный приложение в который jvm не участвовать jvm — это конечно отдельный уровень в этот иерархия но многие проблема который там существовать присущий разработка вообще а не разработка конкретно на java jugru: учитывать что определённый проблема весь же существовать есть ли смысл использовать java для высокопроизводительный приложений? алексей шипилёв: знаете когда я быть школьник один из мой преподаватель в ответ на ехидный вопрос кто-то из мой друг почему же мы не писать на такой-быстрый-с сказать следующий вещь: "я быть писать мой промышленный код на pascal (популярный в тот далёкий времена) потому что он везде я подложить подстилка везде весь проверить не дать я выстрелить себя в нога а в тот место где я важный скорость я уж обман он так чтобы быть быстро" и этот история повторяться с разный действующий лицо и с разный языками: pascal против c java против c++ c против ассемблер и тп на дело производительность большой приложение на горизонт вменяемый прирост как правило определяться производительность довольно маленький кусок в это приложение поэтому мочь быть простой не буйствовать и не писать на язык который вы заставлять писать низкоуровневый код потому что вы с ум сойти стоить писать на высокоуровневый язык а там где надо обмануть его: сделать так чтобы в конкретный место быть быстрый перейти либо к менее идиоматический код повторять кривизна библиотека и рантайм либо отдать тяжёлый на уровень ниже практика промышленный разработка на java и история её производительность в многое этот подход олицетворять ближний доклад алексей состояться на конференция joker 2016 в формат кейноут и конечно же он быть посвятить производительность платформа и способ повышение производительность ваш код java performance глаз разработчик jugru: рассказать пожалуйста о себя и о свой работа олег анастасьев: я работать в команда платформа в компания одноклассник команда платформа разрабатывать программа для тот чтобы одноклассник работать быстро тот разрабатывать и поддерживать различный хранилище дать фреймворка для коммуникация сервер друг с друг и тп кроме тот если что-то с быстродействие случается на продакшен именно команда платформа искать решение как это лечить наш ответственность — сделать так чтобы одноклассник работать быстро потому что если они не быть работать быстро они просто работать не быть — очень быстро завалиться под нагрузка jugru: как вы считать есть ли смысл использовать java для высоконагруженный приложений? или попросту нет альтернативы? олег анастасьев: возможно java — не самый быстрый язык существовать и более быстрый язык но если рассматривать java как язык для разработка больший нагрузить проект то здесь она в принцип альтернатива пока нет можно написать более быстрый код на язык c или c++ но при это этот код быть более дорогой — он написание отладка и последующий поддержка быть стоить значительно дорогой чем аналогичный код на java кроме тот к код на c который торчать в интернет возникать очень много вопрос безопасность как известно в язык с возможный всякий небезопасный конструкция через который потом нехороший человек быть вы взламывать на java такой небезопасный конструкция маленький поэтому в часть безопасность программа на java потребовать меньший усилие в итог java иметь очень хороший отношение цена / производительность у java есть ряд проблема в частность мы прийтись отдельно работать над управление память и поддержка высокий трафик но они мочь быть решить при помощь небольшой количество код — мы для это создать отдельный библиотека one-nio (ссылка на https://githubcom/odnoklassniki/one-nio) весь остальной масса код обладать тот положительный черта java который у нея есть — быстрый разработка безопасность хороший инструментарий диагностирование проблема встроить в jvm защита от ошибка и тд jugru: вы упомянуть что прийтись решать определённый проблема производительность рассказать пожалуйста о они подробнее? олег анастасьев: для мы быстродействие — это не только скорость выполнение код на java мы рассматривать он и с ракурс эффективный использование ресурс — то есть и объём обрабатывать дать и пропускной способность и потребление память и здесь в java действительно много что не хватает: коллекция примитив struct- работа с оффхип прозрачный использование нативный api управление affinity файловый кеш и тд поэтому мы приходиться разрабатывать решение который позволять обходить узкий место для мы быстродействие java в такой трактовка не хватать более тот этот вопрос не мочь ждать несколько год следующий релиз java — проблема должный решаться прямо сейчас поэтому мы активно искать они решение сам давать остановиться на это дробный например один из болевой точка java — это быстродействие ввод-вывод как блокировать так и не блокировать (в частность сетевого) это хорошо видно на пример раздача видео общий исходящий трафик видео сейчас достигать 500 гигабитый для тот чтобы обслуживать такой поток мы должный раздавать видео как можно быстрый чтобы как можно большой трафик приходиться на один сервер наш железо способный отдавать 40 гбитый с машина но написать на java при помощь стандартный решение сервер который быть использовать весь 40 гбитый у вы не получиться — быть слишком много потеря в производительность внутри самый java это один из проблема который мы решать в состав наш open source библиотека пример с 40 гбитный трафик — это свой род экстремум есть и менее нагрузить сервер но там тоже присутствовать свой проблема например ещё один болевой точка java — это хранение большой количество объект в память у java есть garbage collector с один сторона это хорошо поскольку он позволять автоматически убирать мусор но с другой сторона когда вы нужно кешировать в память очень много информация он скорее мешать чем помогать более тот если массив дать на сотня гигабайт храниться в память то вы захотеть чтобы он не потеряться при перезапуск программа — он загрузка занять значительный время такой массив хотеться хранить в разделять память а встроить средство в java для это тоже нет в такой место хотеться иметь ручной управление память хорошо что в java есть unsafe через который мы и сделать собственный решение jugru: развиваться ли jdk в направление решение специфичный для ваш задача проблем? появляться ли новое опция который вы мочь использовать? олег анастасьев: последний выпустить в мир версия java — 8 в она решение упомянуть проблема нет есть только намерение решить какой-то из этот проблема в java 9 часть из они — в 10 и более поздний но получиться или не получится; насколько предложить решение быть хороший чем есть сейчас говорить пока рано тк например java 9 ещё не выйти конечно бета-версия уже можно брать но что измениться пока она дойти до релиз не известно поэтому выйти java — посмотреть jugru: а есть ли какой-то ожидать нововведение который мочь бы вы помочь? к пример varhandles? олег анастасьев: помочь или нет мы varhandles зависеть от тот как они в итог быть реализовать в конечный версия и как быстро они быть работать varhandles — довольно сложный способ даже с точка зрение api сделать то что сейчас можно сделать просто и понятно через unsafe это возможность объявить массив в память один тип а потом читать он как массив память другой тип для человек знакомый с принцип ассемблер или c это выглядеть как обращение по адрес память и считывание ячейка память как long или как byte в зависимость от ситуация грубо говорить varhandles позволять сделать то же самый но более сложно (этый технически более сложный решение на уровень jdk) но зато он иметь большой защита от программист который периодически "стрелять себя в ноги" к тот же varhandles решать только один из сценарий использование unsafe но мы использовать unsafe также и совсем для другой сценарий (например для кастомный сериализация или работа с разделять памятью) и альтернатива это ранний java 10 точно не ожидаться jugru: на основание что в ваш компания приниматься решение о необходимость работа над производительность приложений? олег анастасьев: мы не заниматься быстродействие ради быстродействия; всегда оценивать экономический эффект от оптимизация для мы производительность измеряться в количество деньга который нужно потратить на железо: сначала на закупка сервер а затем каждый год на они поддержка в дата-центр чем большой быстродействие приложение — тем маленький железо необходимый на тот же задача тот маленький деньга уйти на он поддержка оптимизация производительность отталкиваться от поставить задача мочь ли мы позволить себя вот это количество техника для этот конкретный задачи? к пример потратить условно говорить год работа высококвалифицированный программист чтобы улучшить быстродействие на 05% экономически не эффективно до тот пора пока у вы не затронуть некий проблема допустить весь сервер в дата-центр тогда это быть экономически эффективно и мы быть это заниматься если нет мы простой купить новый сервер тот решить проблема железо для мы быстродействие — это бизнес-метрика; и она иметь чёткий экономический обоснование быстродействие пилиться до тот пора пока оно экономически эффективно несмотря на весь вопрос к производительность решение на java отрадно видеть что над этот проблема идти непрерывный работа а сам java несмотря на весь нападки давно стать промышленный стандарт для масштабный высоконагруженный корпоративный проект большой интересный доклад технический хардкорный вы найти в программа joker 2016 предлагать ваш внимание несколько примеров: volker simonis sap: hotspot internals: safepoints nullpointers and stackoverflows тагир валеев иси с ран: stream api: рекомендация хороший собаковод jean-philippe bempel ullink: low latency & mechanical sympathy: issues and solutions владимир иванов oracle: native код off-heap дать и java 